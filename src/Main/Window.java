/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import com.google.zxing.WriterException;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.UIManager;
import javax.swing.text.AbstractDocument;


/**
 *
 * @author luix_eduard
 */
public class Window extends javax.swing.JFrame {

    private static Font fuenteSans12B = new Font("Open Sans", Font.BOLD,12);
    private static Font fuenteSans12P = new Font("Open Sans", Font.PLAIN,12);
    private static Font fuenteSans14B = new Font("Open Sans", Font.BOLD,14);
    private static Font fuenteSans14P = new Font("Open Sans", Font.PLAIN,14);
    private static Font fuenteSans16P = new Font("Open Sans", Font.PLAIN,16);
    private static Font fuenteSans16B = new Font("Open Sans", Font.BOLD,16);
    
    private static String usuario;
    private static String url = "jdbc:mysql://192.168.0.12:3306/sci?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=America/Mexico_City&useSSL=false";
    
    
    //Clases
    private static baseDeDatos bd = new baseDeDatos();
    private static herramientasGUI herramientas = new herramientasGUI();
    
    //Productos variables globales
    BufferedImage imagen;
    BufferedImage imagenProducto;
    boolean imagenSel = false;
    DefaultListModel<String> listaUbicaciones;
    DefaultListModel<String> listaUbicacionesB;
    DefaultListModel<String> listaProveedor;
    DefaultListModel<String> listaProveedorB;
    
    
    //Variables GUI
    int contAdd;
    boolean autAgregarNombre = false;
    boolean rep=false;
    boolean modImagen = false;
    int estadoBusqueda = 1;
    Color azulF = new Color(25,30,111);
    Color gris = new Color(200,200,200);
    Pattern correoPattern = Pattern.compile("([a-z0-9]+(\\.?[a-z0-9])*)+@(([a-z]+)\\.([a-z]+))+");
    boolean admin;
    int[] cambios;
    Tabla t = new Tabla();
    Date fechaBIn;
    Date fechaRegIn = new Date();
    Date fechaBFin;
    Date fechaRegFin = new Date();
    boolean logout = false;
    
    
    //Tabla busqueda
    String[][] reBusquedaNombre;
    
    
    //Informacion del producto
    private static String[][] eSProducto;
    private static String[][] entradasProducto;
    private static String[][] salidasProducto;
    
    
    //Crear usuarios
    private static boolean usuarioExiste = true;
    private static boolean contrasenaUsuario = false;
    private static boolean nombreUsuario = false;
    private static boolean apellidoUsuario = false;
    
    
    //Crear proveedor
    private static boolean razonVacio = true;
    private static boolean representanteVacio = true;
    private static boolean email = false;
    private static boolean telefonoVacio = true;
    private static boolean direccionVacio = true;
    
    /**
     * Creates new form Window
     */
    public Window() {
        
        initComponents();
        jpColor jpVista = new jpColor(Color.WHITE,new Color(25, 30, 111,53));
        jpVista.setSize(this.getSize());
        Backgroud.add(jpVista);
        
        
        jpVista = new jpColor(new Color(25, 30, 111,178), new Color(42,126,222,10));
        jpVista.setSize(this.getSize());
        GestaltOp.add(jpVista);
        
        jpVista = new jpColor(new Color(25, 30, 111,178), new Color(42,126,222,10));
        jpVista.setSize(this.getSize());
        GestaltAdm.add(jpVista);
        
        Date date = new Date();
        fechaBFin = date;
        fechaFinalB.setDate(date);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, -1);
        fechaBIn = calendar.getTime();
        fechaInicioB.setDate(calendar.getTime());
        GhostText ghostText = new GhostText(matchBuscar, "Buscar producto: Ej. BE-8458445");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Backgroud = new javax.swing.JPanel();
        Login = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Mensaje = new javax.swing.JLabel();
        Account = new javax.swing.JTextField();
        pSHButton = new javax.swing.JToggleButton();
        Password = new javax.swing.JPasswordField();
        Error1 = new javax.swing.JLabel();
        iniciarSesion = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Principal = new javax.swing.JPanel();
        rogeriLogo = new javax.swing.JLabel();
        mensajeBienvenida = new javax.swing.JLabel();
        popup = new JPopupMenu();
        JMenuItem menuItemConfiguracion = new JMenuItem("Configuraciones");
        menuItemConfiguracion.setFont(fuenteSans12P);
        menuItemConfiguracion.setForeground(azulF);
        popup.add(menuItemConfiguracion);
        JMenuItem menuItemSalir = new JMenuItem("Salir",new javax.swing.ImageIcon(getClass().getResource("/logoutN.png")));
        menuItemSalir.setFont(fuenteSans12P);
        menuItemSalir.setForeground(azulF);
        popup.add(menuItemSalir);
        menuItemConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configuracionActionPerformed(evt);
            }
        });
        menuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        ImageIcon iconPop = new ImageIcon(getClass().getResource("/settingsN.png"));
        options = new javax.swing.JButton();
        GestaltAdm = new javax.swing.JPanel();
        ProductosAdm = new javax.swing.JToggleButton();
        jLabel26 = new javax.swing.JLabel();
        agregarProductos = new javax.swing.JToggleButton();
        jLabel27 = new javax.swing.JLabel();
        proveedorButton = new javax.swing.JToggleButton();
        jLabel40 = new javax.swing.JLabel();
        agregarUsers = new javax.swing.JToggleButton();
        jLabel30 = new javax.swing.JLabel();
        maquinaria = new javax.swing.JToggleButton();
        jLabel29 = new javax.swing.JLabel();
        registroBoton1 = new javax.swing.JToggleButton();
        jLabel28 = new javax.swing.JLabel();
        GestaltOp = new javax.swing.JPanel();
        productosOp = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        agregarProductosOp = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        registroBoton = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        panelConsultarProductos = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        UIManager.put("ComboBox.disabledBackground", Color.white);
        UIManager.put("ComboBox.disabledForeground", Color.black);
        ordenacion1 = new javax.swing.JComboBox<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablaConsultaProductos = new javax.swing.JTable();
        jLabel49 = new javax.swing.JLabel();
        matchBuscar = new javax.swing.JTextField();
        sortListaProductos = new javax.swing.JToggleButton();
        jLabel78 = new javax.swing.JLabel();
        panelMostrarProducto = new javax.swing.JPanel();
        returnButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        resultado = new javax.swing.JPanel();
        r1 = new javax.swing.JLabel();
        nombreB = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        usoB = new javax.swing.JTextField();
        r2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        descripcionB = new javax.swing.JTextArea();
        jLabel52 = new javax.swing.JLabel();
        precioB = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        minimosB = new javax.swing.JTextField();
        claveB = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        bModImagen = new javax.swing.JLabel();
        imprimir = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        ubicacionesB = new javax.swing.JTextField();
        agregarUbicacionB = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        listaUbicacionB = new javax.swing.JList<>();
        jLabel54 = new javax.swing.JLabel();
        proveedoresB = new javax.swing.JComboBox<>();
        agregarProveedorB = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        listaProveedoresB = new javax.swing.JList<>();
        guardarBusqueda = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        disponiblesB = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        salidasButton = new javax.swing.JButton();
        entradasButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        MostrarResultados = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaEntradasSalidas = new javax.swing.JTable();
        EditarBoton = new javax.swing.JToggleButton();
        borrarProd = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        uMedidaB = new javax.swing.JComboBox<>();
        maquinariaBCB = new javax.swing.JComboBox<>();
        fechaFinalB = new com.toedter.calendar.JDateChooser();
        fechaInicioB = new com.toedter.calendar.JDateChooser();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        panelAgregarProducto = new javax.swing.JPanel();
        UIManager.put("TabbedPane.contentOpaque", false);
        jTabbedPane1 = new javax.swing.JTabbedPane();
        agregarProducto = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        claveDeProductoTF = new javax.swing.JTextField();
        ErrorID = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        nombreTF = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        usoTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcionTF = new javax.swing.JTextArea();
        jLabel24 = new javax.swing.JLabel();
        menosCDButton = new javax.swing.JButton();
        cantidadDisponibleTF = new javax.swing.JTextField();
        masCDButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        uMedidaJCB = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        menosMinimoButton = new javax.swing.JButton();
        minimoTF = new javax.swing.JTextField();
        minimoMasButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        precioEstimadoTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        addImage = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Zona = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        ProveedoresCB = new javax.swing.JComboBox<>();
        agregarProveedor = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        listaProveedores = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        UbicacionTF = new javax.swing.JTextField();
        agregarUbicacion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaUbicacion = new javax.swing.JList<>();
        agregar = new javax.swing.JButton();
        maquinariaCB = new javax.swing.JComboBox<>();
        cargarProducto = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        cargarCSV = new javax.swing.JButton();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        erroresCSVPanel = new javax.swing.JEditorPane();
        exitoCarga = new javax.swing.JLabel();
        panelProveedor = new javax.swing.JPanel();
        UIManager.put("TabbedPane.contentOpaque", false);
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        errorCorreo = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        direccionTF = new javax.swing.JTextField();
        razonTF = new javax.swing.JTextField();
        repPTF = new javax.swing.JTextField();
        emailPTF = new javax.swing.JTextField();
        telefonoPTF = new javax.swing.JTextField();
        aceptarInsertProveedor = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        maquinariaPCB = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        ordenarProveedor = new javax.swing.JComboBox<>();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablaProveedores = new javax.swing.JTable();
        jLabel50 = new javax.swing.JLabel();
        matchBuscar1 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        sortProveedor = new javax.swing.JToggleButton();
        panelUsuario = new javax.swing.JPanel();
        UIManager.put("TabbedPane.contentOpaque", false);
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        userTF = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        passwordPF = new javax.swing.JPasswordField();
        jLabel36 = new javax.swing.JLabel();
        passwordPFConf = new javax.swing.JPasswordField();
        jLabel37 = new javax.swing.JLabel();
        nombreUserTF = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        apellidoTF = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        tipoUser = new javax.swing.JComboBox<>();
        aceptarCrearUsuario = new javax.swing.JButton();
        errorCrearUsername = new javax.swing.JLabel();
        errorCrearPassword = new javax.swing.JLabel();
        errorCrearPassword1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        Usuario = new javax.swing.JPanel();
        regresarUsuario = new javax.swing.JButton();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        apellidosLabel = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        contrasenaConfAdmUser = new javax.swing.JPasswordField();
        contrasenaAdmUser = new javax.swing.JPasswordField();
        cambiarContAdmin = new javax.swing.JButton();
        errorContraAdm1 = new javax.swing.JLabel();
        errorContraAdm2 = new javax.swing.JLabel();
        panelMaquinaria = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        nombreMaquinariaTF = new javax.swing.JTextField();
        botonAgregarMaquinaria = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaMaquinarias = new javax.swing.JTable();
        panelRegistro = new javax.swing.JPanel();
        ordenacion = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaRegistros = new javax.swing.JTable();
        fechaFinal = new com.toedter.calendar.JDateChooser();
        fechaInicio = new com.toedter.calendar.JDateChooser();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        panelConfiguracion = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        cambiarContra = new javax.swing.JPasswordField();
        cambiarContraConf = new javax.swing.JPasswordField();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        errorContra2 = new javax.swing.JLabel();
        cambiarContraButton = new javax.swing.JButton();
        errorContra3 = new javax.swing.JLabel();
        exitoContra = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCI Rogeri");
        setIconImage(new ImageIcon(getClass().getResource("/iconoRogeri.png")).getImage());

        Backgroud.setPreferredSize(new java.awt.Dimension(1366, 768));

        Login.setOpaque(false);
        Login.setPreferredSize(new java.awt.Dimension(1366, 768));
        Login.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        //Login.setVisible(false);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userIcon.png"))); // NOI18N
        Login.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 140, 184, 195));

        Mensaje.setFont(fuenteSans16P);
        Mensaje.setForeground(new java.awt.Color(102, 102, 102));
        Mensaje.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Mensaje.setText("Bienvenido");
        Login.add(Mensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(639, 330, 90, 40));

        Account.setFont(fuenteSans12P);
        Account.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Account.setNextFocusableComponent(Password);
        Account.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AccountKeyReleased(evt);
            }
        });
        Login.add(Account, new org.netbeans.lib.awtextra.AbsoluteConstraints(534, 400, 300, 30));

        pSHButton.setBackground(new java.awt.Color(255, 255, 255));
        pSHButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hide.png"))); // NOI18N
        pSHButton.setContentAreaFilled(false);
        pSHButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pSHButtonActionPerformed(evt);
            }
        });
        Login.add(pSHButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(834, 460, 30, 30));

        Password.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Password.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PasswordKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PasswordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PasswordKeyTyped(evt);
            }
        });
        Login.add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(534, 460, 300, 30));

        Error1.setFont(fuenteSans12P);
        Error1.setForeground(new java.awt.Color(255, 0, 0));
        Error1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Error1.setText("Contraseña o usuario incorrecto");
        Error1.setVisible(false);
        Login.add(Error1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 1368, 20));

        iniciarSesion.setBackground(gris);
        iniciarSesion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        iniciarSesion.setForeground(new java.awt.Color(255, 255, 255));
        iniciarSesion.setText("Iniciar");
        iniciarSesion.setBorder(null);
        iniciarSesion.setBorderPainted(false);
        iniciarSesion.setContentAreaFilled(false);
        iniciarSesion.setEnabled(false);
        iniciarSesion.setOpaque(true);
        iniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarSesionActionPerformed(evt);
            }
        });
        Login.add(iniciarSesion, new org.netbeans.lib.awtextra.AbsoluteConstraints(644, 530, 80, 40));

        jLabel17.setFont(fuenteSans12P);
        jLabel17.setForeground(new java.awt.Color(120, 120, 120));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Contraseña:");
        Login.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(649, 430, 70, 30));

        jLabel18.setFont(fuenteSans12P);
        jLabel18.setForeground(new java.awt.Color(120, 120, 120));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Usuario:");
        Login.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 370, 50, 30));

        Principal.setOpaque(false);
        Principal.setPreferredSize(new java.awt.Dimension(1366, 768));
        Principal.setVisible(false);
        Principal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ImageIcon LogRog = new ImageIcon(new ImageIcon(getClass().getResource("/Logo-Rogeri.png")).getImage().getScaledInstance(390, 546, Image.SCALE_SMOOTH));
        rogeriLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rogeriLogo.setIcon(LogRog);
        rogeriLogo.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        Principal.add(rogeriLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 111, 1102, 564));

        mensajeBienvenida.setFont(fuenteSans14B);
        mensajeBienvenida.setForeground(new java.awt.Color(25, 30, 111));
        mensajeBienvenida.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mensajeBienvenida.setText("jLabel40");
        Principal.add(mensajeBienvenida, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 15, 480, 40));

        options.setIcon(new javax.swing.ImageIcon(getClass().getResource("/settingsN.png"))); // NOI18N
        options.setToolTipText("Opciones");
        options.setBorderPainted(false);
        options.setContentAreaFilled(false);
        options.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/settingsS.png"))); // NOI18N
        options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsActionPerformed(evt);
            }
        });
        Principal.add(options, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 15, 36, 36));

        GestaltAdm.setVisible(false);

        buttonGroup1.add(ProductosAdm);
        ProductosAdm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/InventoryN.png"))); // NOI18N
        ProductosAdm.setBorderPainted(false);
        ProductosAdm.setContentAreaFilled(false);
        ProductosAdm.setFocusPainted(false);
        ProductosAdm.setRolloverEnabled(false);
        ProductosAdm.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/InventoryS.png"))); // NOI18N
        ProductosAdm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductosAdmActionPerformed(evt);
            }
        });

        jLabel26.setFont(fuenteSans12P);
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Inventario");

        buttonGroup1.add(agregarProductos);
        agregarProductos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/agregarProdN.png"))); // NOI18N
        agregarProductos.setBorderPainted(false);
        agregarProductos.setContentAreaFilled(false);
        agregarProductos.setFocusPainted(false);
        agregarProductos.setRolloverEnabled(false);
        agregarProductos.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/agregarProdS.png"))); // NOI18N
        agregarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProductosActionPerformed(evt);
            }
        });

        jLabel27.setFont(fuenteSans12P);
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Agregar productos");

        buttonGroup1.add(proveedorButton);
        proveedorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ProveedorN.png"))); // NOI18N
        proveedorButton.setBorderPainted(false);
        proveedorButton.setContentAreaFilled(false);
        proveedorButton.setFocusPainted(false);
        proveedorButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/ProveedorS.png"))); // NOI18N
        proveedorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proveedorButtonActionPerformed(evt);
            }
        });

        jLabel40.setFont(fuenteSans12P);
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Proveedores");

        buttonGroup1.add(agregarUsers);
        agregarUsers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/person addN.png"))); // NOI18N
        agregarUsers.setBorderPainted(false);
        agregarUsers.setContentAreaFilled(false);
        agregarUsers.setFocusPainted(false);
        agregarUsers.setRolloverEnabled(false);
        agregarUsers.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/person addS.png"))); // NOI18N
        agregarUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarUsersActionPerformed(evt);
            }
        });

        jLabel30.setFont(fuenteSans12P);
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Usuarios");

        buttonGroup1.add(maquinaria);
        maquinaria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MachineN.png"))); // NOI18N
        maquinaria.setBorderPainted(false);
        maquinaria.setContentAreaFilled(false);
        maquinaria.setFocusPainted(false);
        maquinaria.setRolloverEnabled(false);
        maquinaria.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/MachineS.png"))); // NOI18N
        maquinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maquinariaActionPerformed(evt);
            }
        });

        jLabel29.setFont(fuenteSans12P);
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Maquinaria");

        buttonGroup1.add(registroBoton1);
        registroBoton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RegistroN.png"))); // NOI18N
        registroBoton1.setBorderPainted(false);
        registroBoton1.setContentAreaFilled(false);
        registroBoton1.setFocusPainted(false);
        registroBoton1.setRolloverEnabled(false);
        registroBoton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/RegistroS.png"))); // NOI18N
        registroBoton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registroBotonActionPerformed(evt);
            }
        });

        jLabel28.setFont(fuenteSans12P);
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Registro");

        javax.swing.GroupLayout GestaltAdmLayout = new javax.swing.GroupLayout(GestaltAdm);
        GestaltAdm.setLayout(GestaltAdmLayout);
        GestaltAdmLayout.setHorizontalGroup(
            GestaltAdmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(GestaltAdmLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(GestaltAdmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductosAdm, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proveedorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maquinaria, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registroBoton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        GestaltAdmLayout.setVerticalGroup(
            GestaltAdmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GestaltAdmLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(ProductosAdm, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel26)
                .addGap(11, 11, 11)
                .addComponent(agregarProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel27)
                .addGap(11, 11, 11)
                .addComponent(proveedorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel40)
                .addGap(11, 11, 11)
                .addComponent(agregarUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel30)
                .addGap(11, 11, 11)
                .addComponent(maquinaria, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel29)
                .addGap(11, 11, 11)
                .addComponent(registroBoton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel28))
        );

        Principal.add(GestaltAdm, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 21, -1, 730));

        GestaltOp.setVisible(false);

        buttonGroup1.add(productosOp);
        productosOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/InventoryN.png"))); // NOI18N
        productosOp.setBorderPainted(false);
        productosOp.setContentAreaFilled(false);
        productosOp.setFocusPainted(false);
        productosOp.setRolloverEnabled(false);
        productosOp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/InventoryS.png"))); // NOI18N
        productosOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductosAdmActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Buscar");
        jLabel1.setFont(fuenteSans12B);

        buttonGroup1.add(agregarProductosOp);
        agregarProductosOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/agregarProdN.png"))); // NOI18N
        agregarProductosOp.setBorderPainted(false);
        agregarProductosOp.setContentAreaFilled(false);
        agregarProductosOp.setFocusPainted(false);
        agregarProductosOp.setRolloverEnabled(false);
        agregarProductosOp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/agregarProdS.png"))); // NOI18N
        agregarProductosOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProductosActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Productos");
        jLabel3.setFont(fuenteSans12B);

        buttonGroup1.add(registroBoton);
        registroBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RegistroN.png"))); // NOI18N
        registroBoton.setBorderPainted(false);
        registroBoton.setContentAreaFilled(false);
        registroBoton.setFocusPainted(false);
        registroBoton.setRolloverEnabled(false);
        registroBoton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/RegistroS.png"))); // NOI18N
        registroBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registroBotonActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Registro");
        jLabel4.setFont(fuenteSans12B);

        javax.swing.GroupLayout GestaltOpLayout = new javax.swing.GroupLayout(GestaltOp);
        GestaltOp.setLayout(GestaltOpLayout);
        GestaltOpLayout.setHorizontalGroup(
            GestaltOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(GestaltOpLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(GestaltOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productosOp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarProductosOp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registroBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        GestaltOpLayout.setVerticalGroup(
            GestaltOpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GestaltOpLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(productosOp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addGap(116, 116, 116)
                .addComponent(agregarProductosOp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addGap(116, 116, 116)
                .addComponent(registroBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4))
        );

        Principal.add(GestaltOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 21, 206, 730));

        panelConsultarProductos.setOpaque(false);
        panelConsultarProductos.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel48.setFont(fuenteSans12B);
        jLabel48.setForeground(new java.awt.Color(25, 30, 111));
        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel48.setText("Ordenar por:");
        panelConsultarProductos.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 100, 46));

        ordenacion1.setBackground(Color.white);
        ordenacion1.setFont(fuenteSans12P);
        ordenacion1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Clave producto", "Nombre", "Maquinaria", "Uso", "Precio" }));
        ordenacion1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ordenacion1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordenacion1ItemStateChanged(evt);
            }
        });
        panelConsultarProductos.add(ordenacion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 140, 46));

        jScrollPane10.setOpaque(false);
        jScrollPane10.setOpaque(false);
        jScrollPane10.getViewport().setOpaque(false);

        tablaConsultaProductos.setFont(fuenteSans12P);
        tablaConsultaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Nombre", "Maquinaria", "Uso", "Descripción", "Disponible", "Precio", "Minimo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaConsultaProductos.getTableHeader().setFont(fuenteSans12B);
        tablaConsultaProductos.getTableHeader().setOpaque(false);
        tablaConsultaProductos.getTableHeader().setBackground(azulF);
        tablaConsultaProductos.getTableHeader().setForeground(Color.white);
        tablaConsultaProductos.setRowHeight(30);
        tablaConsultaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaConsultaProductosMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tablaConsultaProductos);

        panelConsultarProductos.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 125, 1060, 610));

        jLabel49.setFont(fuenteSans12B);
        jLabel49.setForeground(new java.awt.Color(25, 30, 111));
        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel49.setText("Buscar:");
        panelConsultarProductos.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 100, 46));

        matchBuscar.setFont(fuenteSans12P);
        matchBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matchBuscarKeyReleased(evt);
            }
        });
        panelConsultarProductos.add(matchBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 310, 46));

        sortListaProductos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sortdesc.png"))); // NOI18N
        sortListaProductos.setContentAreaFilled(false);
        sortListaProductos.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/sortasc.png"))); // NOI18N
        sortListaProductos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortListaProductosItemStateChanged(evt);
            }
        });
        panelConsultarProductos.add(sortListaProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 46, 46));

        jLabel78.setFont(fuenteSans12B);
        jLabel78.setForeground(new java.awt.Color(25, 30, 111));
        jLabel78.setText("Seleccione un producto para continuar");
        panelConsultarProductos.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 440, -1));

        panelConsultarProductos.setVisible(false);

        Principal.add(panelConsultarProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelMostrarProducto.setOpaque(false);
        panelMostrarProducto.setVisible(false);
        panelMostrarProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        returnButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/returnN.png"))); // NOI18N
        returnButton.setBorderPainted(false);
        returnButton.setContentAreaFilled(false);
        returnButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/returnS.png"))); // NOI18N
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        panelMostrarProducto.add(returnButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 22, 50, 50));

        jScrollPane5.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane5.setOpaque(false);
        jScrollPane5.getViewport().setOpaque(false);

        resultado.setBackground(new java.awt.Color(255, 255, 255));
        resultado.setOpaque(false);
        resultado.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        r1.setFont(fuenteSans14B);
        r1.setForeground(new java.awt.Color(25, 30, 111));
        r1.setText("Nombre:");
        resultado.add(r1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 70, 40));

        nombreB.setFont(fuenteSans12P);
        nombreB.setEnabled(false);
        nombreB.setOpaque(false);
        nombreB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nombreBMouseClicked(evt);
            }
        });
        nombreB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreBKeyReleased(evt);
            }
        });
        resultado.add(nombreB, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 372, 40));

        jLabel53.setFont(fuenteSans14B);
        jLabel53.setForeground(new java.awt.Color(25, 30, 111));
        jLabel53.setText("Maquinaria:");
        resultado.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, 40));

        jLabel15.setFont(fuenteSans14B);
        jLabel15.setForeground(new java.awt.Color(25, 30, 111));
        jLabel15.setText("Uso:");
        resultado.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 70, 40));

        usoB.setFont(fuenteSans12P);
        usoB.setEnabled(false);
        usoB.setOpaque(false);
        usoB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usoBMouseClicked(evt);
            }
        });
        usoB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usoBKeyReleased(evt);
            }
        });
        resultado.add(usoB, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 410, 40));

        r2.setFont(fuenteSans14B);
        r2.setForeground(new java.awt.Color(25, 30, 111));
        r2.setText("Descripción:");
        resultado.add(r2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 90, 40));

        descripcionB.setColumns(20);
        descripcionB.setFont(fuenteSans12P);
        descripcionB.setRows(5);
        descripcionB.setEnabled(false);
        descripcionB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descripcionBMouseClicked(evt);
            }
        });
        descripcionB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descripcionBKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(descripcionB);

        resultado.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 363, 123));

        jLabel52.setFont(fuenteSans14B);
        jLabel52.setForeground(new java.awt.Color(25, 30, 111));
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel52.setText("Unidad de medida:");
        jLabel52.setVisible(false);
        resultado.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 160, 40));

        precioB.setFont(fuenteSans12P);
        precioB.setEnabled(false);
        precioB.setOpaque(false);
        precioB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                precioBMouseClicked(evt);
            }
        });
        precioB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                precioBKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precioBKeyTyped(evt);
            }
        });
        resultado.add(precioB, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, 181, 40));

        jLabel16.setFont(fuenteSans14B);
        jLabel16.setForeground(new java.awt.Color(25, 30, 111));
        jLabel16.setText("Minimos:");
        resultado.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 70, 40));

        minimosB.setFont(fuenteSans12P);
        minimosB.setEnabled(false);
        minimosB.setOpaque(false);
        minimosB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimosBMouseClicked(evt);
            }
        });
        minimosB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minimosBKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minimosBKeyTyped(evt);
            }
        });
        resultado.add(minimosB, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 181, 40));

        claveB.setFont(fuenteSans12P);
        claveB.setEnabled(false);
        claveB.setOpaque(false);
        claveB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                claveBMouseClicked(evt);
            }
        });
        claveB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                claveBKeyReleased(evt);
            }
        });
        resultado.add(claveB, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 364, 40));

        jLabel19.setText("Imprimir QR");
        resultado.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 380, -1, -1));

        bModImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarImgGrande.png"))); // NOI18N
        bModImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bModImagenMouseClicked(evt);
            }
        });
        resultado.add(bModImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, 310, 220));

        imprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qrChico.png"))); // NOI18N
        imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirActionPerformed(evt);
            }
        });
        resultado.add(imprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 320, 56, -1));

        jLabel21.setFont(fuenteSans14B);
        jLabel21.setForeground(new java.awt.Color(25, 30, 111));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Ubicaciones:");
        resultado.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 100, 30));

        ubicacionesB.setFont(fuenteSans12P);
        ubicacionesB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ubicacionesBKeyPressed(evt);
            }
        });
        resultado.add(ubicacionesB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 470, 270, 40));

        agregarUbicacionB.setBackground(gris);
        agregarUbicacionB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        agregarUbicacionB.setForeground(new java.awt.Color(255, 255, 255));
        agregarUbicacionB.setText("→");
        agregarUbicacionB.setBorder(null);
        agregarUbicacionB.setContentAreaFilled(false);
        agregarUbicacionB.setEnabled(false);
        agregarUbicacionB.setOpaque(true);
        agregarUbicacionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarUbicacionBActionPerformed(evt);
            }
        });
        resultado.add(agregarUbicacionB, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 470, 40, 40));

        listaUbicacionB.setFont(fuenteSans12P);
        listaUbicacionB.setModel(listaUbicacionesB = new DefaultListModel());
        listaUbicacionB.setToolTipText("Doble click para eliminar una ubicación");
        listaUbicacionB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaUbicacionBMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(listaUbicacionB);

        resultado.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 510, 310, 98));

        jLabel54.setFont(fuenteSans14B);
        jLabel54.setForeground(new java.awt.Color(25, 30, 111));
        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel54.setText("Proveedores:");
        resultado.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 490, 100, 30));

        proveedoresB.setFont(fuenteSans12P);
        resultado.add(proveedoresB, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 470, 270, 40));

        agregarProveedorB.setBackground(new java.awt.Color(25, 30, 111));
        agregarProveedorB.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        agregarProveedorB.setForeground(new java.awt.Color(255, 255, 255));
        agregarProveedorB.setText("→");
        agregarProveedorB.setBorder(null);
        agregarProveedorB.setContentAreaFilled(false);
        agregarProveedorB.setOpaque(true);
        agregarProveedorB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProveedorBActionPerformed(evt);
            }
        });
        resultado.add(agregarProveedorB, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 470, 40, 40));

        listaProveedoresB.setFont(fuenteSans12P);
        listaProveedoresB.setModel(listaProveedorB = new DefaultListModel());
        listaProveedoresB.setToolTipText("Doble click para eliminar un proveedor");
        listaProveedoresB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaProveedoresBMouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(listaProveedoresB);

        resultado.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 510, 310, 98));

        guardarBusqueda.setBackground(gris);
        guardarBusqueda.setFont(fuenteSans14B);
        guardarBusqueda.setForeground(new java.awt.Color(255, 255, 255));
        guardarBusqueda.setText("Guardar");
        guardarBusqueda.setContentAreaFilled(false);
        guardarBusqueda.setEnabled(false);
        guardarBusqueda.setOpaque(true);
        guardarBusqueda.setVisible(false);
        guardarBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBusquedaActionPerformed(evt);
            }
        });
        resultado.add(guardarBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 630, 110, 40));

        jLabel20.setFont(fuenteSans14B);
        jLabel20.setForeground(new java.awt.Color(25, 30, 111));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Unidades disponibles:");
        resultado.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 700, 973, -1));

        disponiblesB.setFont(fuenteSans16P);
        disponiblesB.setForeground(new java.awt.Color(0, 187, 0));
        disponiblesB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        disponiblesB.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        resultado.add(disponiblesB, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 720, 973, 30));

        jLabel22.setFont(fuenteSans14B);
        jLabel22.setForeground(new java.awt.Color(25, 30, 111));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Ingreso/salida de productos");
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resultado.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 770, 300, 20));

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 1, 1, new java.awt.Color(25, 30, 111)));
        jPanel1.setName(""); // NOI18N
        jPanel1.setOpaque(false);

        salidasButton.setBackground(new java.awt.Color(25, 30, 111));
        salidasButton.setFont(fuenteSans12B);
        salidasButton.setForeground(new java.awt.Color(255, 255, 255));
        salidasButton.setText("Salidas");
        salidasButton.setContentAreaFilled(false);
        salidasButton.setOpaque(true);
        salidasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salidasButtonActionPerformed(evt);
            }
        });

        entradasButton.setBackground(new java.awt.Color(25, 30, 111));
        entradasButton.setFont(fuenteSans12B);
        entradasButton.setForeground(new java.awt.Color(255, 255, 255));
        entradasButton.setText("Entradas");
        entradasButton.setContentAreaFilled(false);
        entradasButton.setOpaque(true);
        entradasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradasButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(entradasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(salidasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entradasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salidasButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        resultado.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 780, 420, 80));

        jLabel23.setFont(fuenteSans14B);
        jLabel23.setForeground(new java.awt.Color(25, 30, 111));
        jLabel23.setText("Mostrar:");
        resultado.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 880, 70, 40));

        MostrarResultados.setFont(fuenteSans12P);
        MostrarResultados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entradas", "Salidas" }));
        MostrarResultados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MostrarResultadosItemStateChanged(evt);
            }
        });
        resultado.add(MostrarResultados, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 880, 90, 40));

        jScrollPane7.setOpaque(false);
        jScrollPane7.getViewport().setOpaque(false);

        tablaEntradasSalidas.setFont(fuenteSans12P);
        tablaEntradasSalidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Día", "Cantidad", "Detalles"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaEntradasSalidas.setRowHeight(30);
        tablaEntradasSalidas.getTableHeader().setFont(fuenteSans12B);
        tablaEntradasSalidas.getTableHeader().setOpaque(false);
        tablaEntradasSalidas.getTableHeader().setBackground(azulF);
        tablaEntradasSalidas.getTableHeader().setForeground(Color.white);
        jScrollPane7.setViewportView(tablaEntradasSalidas);

        resultado.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 930, 940, 310));

        EditarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EditarOff.png"))); // NOI18N
        EditarBoton.setToolTipText("Modificar producto");
        EditarBoton.setBorderPainted(false);
        EditarBoton.setContentAreaFilled(false);
        EditarBoton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/editarON.png"))); // NOI18N
        EditarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarBotonActionPerformed(evt);
            }
        });
        resultado.add(EditarBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 10, 40, 40));

        borrarProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/borrarS.png"))); // NOI18N
        borrarProd.setToolTipText("Eliminar producto");
        borrarProd.setBorderPainted(false);
        borrarProd.setContentAreaFilled(false);
        borrarProd.setEnabled(false);
        borrarProd.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/borrarN.png"))); // NOI18N
        borrarProd.setVisible(false);
        borrarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarProdActionPerformed(evt);
            }
        });
        resultado.add(borrarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 70, 40, 40));

        jLabel55.setFont(fuenteSans14B);
        jLabel55.setForeground(new java.awt.Color(25, 30, 111));
        jLabel55.setText("$");
        resultado.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 40, 40));

        uMedidaB.setFont(fuenteSans12P);
        uMedidaB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PZ", "KG", "m" }));
        uMedidaB.setOpaque(false);
        uMedidaB.setVisible(false);
        resultado.add(uMedidaB, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 350, 80, 46));

        maquinariaBCB.setFont(fuenteSans12P);
        maquinariaBCB.setOpaque(false);
        maquinariaBCB.setEnabled(false);
        maquinariaBCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maquinariaBCBActionPerformed(evt);
            }
        });
        resultado.add(maquinariaBCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 280, 40));

        fechaFinalB.setBackground(new java.awt.Color(25, 30, 111));
        fechaFinalB.setDateFormatString("dd/MM/yyyy");
        fechaFinalB.setFont(fuenteSans12P);
        fechaFinal.getJCalendar().setMaxSelectableDate(new Date());
        fechaFinalB.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaFinalBPropertyChange(evt);
            }
        });
        resultado.add(fechaFinalB, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 880, 170, 40));

        fechaInicioB.setBackground(new java.awt.Color(25, 30, 111));
        fechaInicioB.setDateFormatString("dd/MM/yyyy");
        fechaInicioB.setFont(fuenteSans12P);
        fechaInicio.getJCalendar().setMaxSelectableDate(fechaInicio.getDate());
        fechaInicioB.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaInicioBPropertyChange(evt);
            }
        });
        resultado.add(fechaInicioB, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 880, 170, 40));

        jLabel69.setFont(fuenteSans12B);
        jLabel69.setForeground(new java.awt.Color(25, 30, 111));
        jLabel69.setText("Hasta:");
        resultado.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 880, 50, 40));

        jLabel70.setFont(fuenteSans12B);
        jLabel70.setForeground(new java.awt.Color(25, 30, 111));
        jLabel70.setText("Desde:");
        resultado.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 880, 60, 40));

        jLabel71.setFont(fuenteSans14B);
        jLabel71.setForeground(new java.awt.Color(25, 30, 111));
        jLabel71.setText("Precio:");
        resultado.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 50, 40));

        jScrollPane5.setViewportView(resultado);

        panelMostrarProducto.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 73, 1010, 628));

        Principal.add(panelMostrarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelAgregarProducto.setOpaque(false);
        panelAgregarProducto.setPreferredSize(new java.awt.Dimension(1000, 768));
        panelAgregarProducto.setVisible(false);
        panelAgregarProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(25, 30, 111));
        jTabbedPane1.setForeground(new java.awt.Color(25, 30, 111));
        jTabbedPane1.setFont(fuenteSans16P);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        agregarProducto.setOpaque(false);
        agregarProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(fuenteSans14P);
        jLabel6.setForeground(new java.awt.Color(25, 30, 111));
        jLabel6.setText("*Valores requeridos");
        agregarProducto.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 490, -1));

        jLabel5.setFont(fuenteSans14B);
        jLabel5.setForeground(new java.awt.Color(25, 30, 111));
        jLabel5.setText("Clave de producto:");
        agregarProducto.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, -1));

        claveDeProductoTF.setFont(fuenteSans14P);
        claveDeProductoTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                claveDeProductoTFKeyReleased(evt);
            }
        });
        ((AbstractDocument)claveDeProductoTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        agregarProducto.add(claveDeProductoTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 301, 46));

        ErrorID.setFont(fuenteSans12B);
        ErrorID.setForeground(new java.awt.Color(255, 0, 0));
        ErrorID.setText("*Existe un producto con esta clave");
        ErrorID.setVisible(false);
        agregarProducto.add(ErrorID, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 230, 50));

        jLabel31.setFont(fuenteSans14B);
        jLabel31.setForeground(new java.awt.Color(25, 30, 111));
        jLabel31.setText("*Nombre:");
        agregarProducto.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, -1, -1));

        nombreTF.setFont(fuenteSans14P);
        nombreTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreTFKeyReleased(evt);
            }
        });
        ((AbstractDocument)nombreTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        agregarProducto.add(nombreTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 360, 46));

        jLabel25.setFont(fuenteSans14B);
        jLabel25.setForeground(new java.awt.Color(25, 30, 111));
        jLabel25.setText("Maquinaria:");
        agregarProducto.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, -1, -1));

        jLabel32.setFont(fuenteSans14B);
        jLabel32.setForeground(new java.awt.Color(25, 30, 111));
        jLabel32.setText("Uso:");
        agregarProducto.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, -1, -1));

        usoTF.setFont(fuenteSans14P);
        usoTF.setToolTipText("Uso del producto");
        ((AbstractDocument)usoTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        agregarProducto.add(usoTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 360, 46));

        jLabel7.setFont(fuenteSans14B);
        jLabel7.setForeground(new java.awt.Color(25, 30, 111));
        jLabel7.setText("Descripción:");
        agregarProducto.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, -1, -1));

        descripcionTF.setColumns(20);
        descripcionTF.setFont(fuenteSans14P);
        descripcionTF.setRows(5);
        ((AbstractDocument)descripcionTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        jScrollPane2.setViewportView(descripcionTF);

        agregarProducto.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 358, -1));

        jLabel24.setFont(fuenteSans14B);
        jLabel24.setForeground(new java.awt.Color(25, 30, 111));
        jLabel24.setText("Cantidad disponible:");
        agregarProducto.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, -1, -1));

        menosCDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menos.png"))); // NOI18N
        menosCDButton.setBorderPainted(false);
        menosCDButton.setContentAreaFilled(false);
        menosCDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menosCDButtonActionPerformed(evt);
            }
        });
        agregarProducto.add(menosCDButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 390, 51, 46));

        cantidadDisponibleTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cantidadDisponibleTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cantidadDisponibleTF.setText("0");
        cantidadDisponibleTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cantidadDisponibleTFFocusLost(evt);
            }
        });
        cantidadDisponibleTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cantidadDisponibleTFMouseClicked(evt);
            }
        });
        cantidadDisponibleTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cantidadDisponibleTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cantidadDisponibleTFKeyTyped(evt);
            }
        });
        agregarProducto.add(cantidadDisponibleTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 187, 46));

        masCDButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Mas.png"))); // NOI18N
        masCDButton.setBorderPainted(false);
        masCDButton.setContentAreaFilled(false);
        masCDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masCDButtonActionPerformed(evt);
            }
        });
        agregarProducto.add(masCDButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, 51, 46));

        jLabel8.setFont(fuenteSans14B);
        jLabel8.setForeground(new java.awt.Color(25, 30, 111));
        jLabel8.setText("Unidad de medida:");
        agregarProducto.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, -1, -1));

        uMedidaJCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PZ", "KG", "m" }));
        agregarProducto.add(uMedidaJCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 80, 46));

        jLabel9.setFont(fuenteSans14B);
        jLabel9.setForeground(new java.awt.Color(25, 30, 111));
        jLabel9.setText("Minimo:");
        agregarProducto.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 520, -1, -1));

        menosMinimoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menos.png"))); // NOI18N
        menosMinimoButton.setBorderPainted(false);
        menosMinimoButton.setContentAreaFilled(false);
        menosMinimoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menosMinimoButtonActionPerformed(evt);
            }
        });
        agregarProducto.add(menosMinimoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 510, 51, 46));

        minimoTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        minimoTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minimoTF.setText("0");
        minimoTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minimoTFFocusLost(evt);
            }
        });
        minimoTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimoTFMouseClicked(evt);
            }
        });
        minimoTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minimoTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minimoTFKeyTyped(evt);
            }
        });
        agregarProducto.add(minimoTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 510, 187, 46));

        minimoMasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Mas.png"))); // NOI18N
        minimoMasButton.setBorderPainted(false);
        minimoMasButton.setContentAreaFilled(false);
        minimoMasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimoMasButtonActionPerformed(evt);
            }
        });
        agregarProducto.add(minimoMasButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 510, 51, 46));

        jLabel10.setFont(fuenteSans14B);
        jLabel10.setForeground(new java.awt.Color(25, 30, 111));
        jLabel10.setText("Precio estimado:");
        agregarProducto.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 590, -1, -1));

        precioEstimadoTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        precioEstimadoTF.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        precioEstimadoTF.setText("0");
        precioEstimadoTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                precioEstimadoTFFocusLost(evt);
            }
        });
        precioEstimadoTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                precioEstimadoTFMouseClicked(evt);
            }
        });
        precioEstimadoTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                precioEstimadoTFKeyTyped(evt);
            }
        });
        agregarProducto.add(precioEstimadoTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 570, 187, 46));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(25, 30, 111));
        jLabel11.setText("$");
        agregarProducto.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 580, -1, -1));

        addImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarImgGrande.png"))); // NOI18N
        addImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addImageMouseClicked(evt);
            }
        });
        agregarProducto.add(addImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(748, 23, 310, 200));

        jLabel13.setFont(fuenteSans14B);
        jLabel13.setForeground(new java.awt.Color(25, 30, 111));
        jLabel13.setText("Zona:");
        agregarProducto.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 260, -1, -1));

        Zona.setFont(fuenteSans12P);
        agregarProducto.add(Zona, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 240, 249, 46));

        jLabel33.setFont(fuenteSans14B);
        jLabel33.setForeground(new java.awt.Color(25, 30, 111));
        jLabel33.setText("Proveedor:");
        agregarProducto.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, -1, -1));

        AutoCompletion.enable(ProveedoresCB);
        agregarProducto.add(ProveedoresCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 300, 260, 46));

        agregarProveedor.setBackground(gris);
        agregarProveedor.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        agregarProveedor.setForeground(new java.awt.Color(255, 255, 255));
        agregarProveedor.setText("→");
        agregarProveedor.setBorder(null);
        agregarProveedor.setContentAreaFilled(false);
        agregarProveedor.setEnabled(false);
        agregarProveedor.setOpaque(true);
        agregarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProveedorActionPerformed(evt);
            }
        });
        agregarProducto.add(agregarProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 300, 51, 46));

        listaProveedores.setModel(listaProveedor = new DefaultListModel());
        listaProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaProveedoresMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(listaProveedores);

        agregarProducto.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 350, 260, -1));

        jLabel14.setFont(fuenteSans14B);
        jLabel14.setForeground(new java.awt.Color(25, 30, 111));
        jLabel14.setText("Ubicación:");
        agregarProducto.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 510, -1, -1));

        UbicacionTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                UbicacionTFFocusLost(evt);
            }
        });
        UbicacionTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UbicacionTFKeyPressed(evt);
            }
        });
        ((AbstractDocument)UbicacionTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        agregarProducto.add(UbicacionTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 490, 260, 46));

        agregarUbicacion.setBackground(gris);
        agregarUbicacion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        agregarUbicacion.setForeground(new java.awt.Color(255, 255, 255));
        agregarUbicacion.setText("→");
        agregarUbicacion.setBorder(null);
        agregarUbicacion.setContentAreaFilled(false);
        agregarUbicacion.setEnabled(false);
        agregarUbicacion.setOpaque(true);
        agregarUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarUbicacionActionPerformed(evt);
            }
        });
        agregarProducto.add(agregarUbicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 490, 51, 46));

        listaUbicacion.setModel(listaUbicaciones = new DefaultListModel());
        listaUbicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaUbicacionMouseClicked(evt);
            }
        });
        listaUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listaUbicacionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(listaUbicacion);

        agregarProducto.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 540, -1, -1));

        agregar.setBackground(new java.awt.Color(200, 200, 200));
        agregar.setFont(fuenteSans12B);
        agregar.setForeground(new java.awt.Color(255, 255, 255));
        agregar.setText("Agregar");
        agregar.setContentAreaFilled(false);
        agregar.setEnabled(false);
        agregar.setOpaque(true);
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        agregarProducto.add(agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 630, 118, 47));

        maquinariaCB.setFont(fuenteSans14P);
        AutoCompletion.enable(maquinariaCB);
        agregarProducto.add(maquinariaCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, 300, 46));

        jTabbedPane1.addTab("Agregar Producto", agregarProducto);

        cargarProducto.setOpaque(false);
        cargarProducto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel58.setFont(fuenteSans12B);
        jLabel58.setForeground(new java.awt.Color(25, 30, 111));
        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel58.setText("Seleccionar");
        cargarProducto.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 1097, 20));

        jLabel59.setFont(fuenteSans12P);
        jLabel59.setForeground(new java.awt.Color(25, 30, 111));
        jLabel59.setText("Se cargara un archivo con extensión CSV");
        cargarProducto.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 130, 389, -1));

        jLabel60.setFont(fuenteSans12P);
        jLabel60.setForeground(new java.awt.Color(25, 30, 111));
        jLabel60.setText("Productos sin nombre se descartaran");
        cargarProducto.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, 593, -1));

        cargarCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/subirN.png"))); // NOI18N
        cargarCSV.setBorderPainted(false);
        cargarCSV.setContentAreaFilled(false);
        cargarCSV.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/subirS.png"))); // NOI18N
        cargarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarCSVActionPerformed(evt);
            }
        });
        cargarProducto.add(cargarCSV, new org.netbeans.lib.awtextra.AbsoluteConstraints(503, 254, 90, 90));

        jLabel61.setFont(fuenteSans16B);
        jLabel61.setForeground(new java.awt.Color(25, 30, 111));
        jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel61.setText("Seleccionar archivo");
        cargarProducto.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 84, 1097, 28));

        jLabel62.setFont(fuenteSans12P);
        jLabel62.setForeground(new java.awt.Color(25, 30, 111));
        jLabel62.setText("IMPORTANTE: Se verificara la integridad de los datos para posteriormente insertarlos");
        cargarProducto.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 593, 20));

        jLabel63.setFont(fuenteSans12P);
        jLabel63.setForeground(new java.awt.Color(25, 30, 111));
        jLabel63.setText("Productos que no posean clave se generara de la manera predeterminada");
        cargarProducto.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 593, -1));

        erroresCSVPanel.setEditable(false);
        erroresCSVPanel.setFont(fuenteSans12P);
        jScrollPane13.setViewportView(erroresCSVPanel);

        cargarProducto.add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 770, 220));

        exitoCarga.setFont(fuenteSans14B);
        exitoCarga.setForeground(new java.awt.Color(25, 30, 111));
        exitoCarga.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitoCarga.setText("Se completó con éxito la carga de datos");
        cargarProducto.add(exitoCarga, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 1100, -1));

        jTabbedPane1.addTab("Cargar CSV", cargarProducto);

        panelAgregarProducto.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 16, 1102, 730));

        Principal.add(panelAgregarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelProveedor.setOpaque(false);
        panelProveedor.setVisible(false);
        panelProveedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane2.setBackground(new java.awt.Color(25, 30, 111));
        jTabbedPane2.setForeground(new java.awt.Color(25, 30, 111));
        jTabbedPane2.setFont(fuenteSans16P);
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        jPanel2.setOpaque(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel41.setFont(fuenteSans14B);
        jLabel41.setForeground(new java.awt.Color(25, 30, 111));
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel41.setText("Maquinaria:");
        jPanel2.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 180, 46));

        jLabel42.setFont(fuenteSans14B);
        jLabel42.setForeground(new java.awt.Color(25, 30, 111));
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel42.setText("*Campos requeridos");
        jPanel2.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 250, 46));

        jLabel43.setFont(fuenteSans14B);
        jLabel43.setForeground(new java.awt.Color(25, 30, 111));
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel43.setText("*Representante:");
        jPanel2.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, 170, 46));

        errorCorreo.setFont(fuenteSans14B);
        errorCorreo.setForeground(new java.awt.Color(255, 0, 0));
        errorCorreo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        errorCorreo.setText("*Correo no valido");
        errorCorreo.setVisible(false);
        jPanel2.add(errorCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 310, 160, 46));

        jLabel45.setFont(fuenteSans14B);
        jLabel45.setForeground(new java.awt.Color(25, 30, 111));
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel45.setText("*Dirección:");
        jPanel2.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, 160, 46));

        jLabel46.setFont(fuenteSans14B);
        jLabel46.setForeground(new java.awt.Color(25, 30, 111));
        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel46.setText("*Telefono:");
        jPanel2.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 150, 46));

        direccionTF.setFont(fuenteSans12P);
        direccionTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                direccionTFKeyReleased(evt);
            }
        });
        jPanel2.add(direccionTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 430, 460, 46));

        razonTF.setFont(fuenteSans12P);
        razonTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                razonTFKeyReleased(evt);
            }
        });
        jPanel2.add(razonTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 450, 46));

        repPTF.setFont(fuenteSans12P);
        repPTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                repPTFKeyReleased(evt);
            }
        });
        jPanel2.add(repPTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 460, 46));

        emailPTF.setFont(fuenteSans12P);
        emailPTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailPTFKeyReleased(evt);
            }
        });
        jPanel2.add(emailPTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 310, 410, 46));

        telefonoPTF.setFont(fuenteSans12P);
        telefonoPTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                telefonoPTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                telefonoPTFKeyTyped(evt);
            }
        });
        jPanel2.add(telefonoPTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 370, 250, 46));

        aceptarInsertProveedor.setBackground(gris);
        aceptarInsertProveedor.setFont(fuenteSans14B);
        aceptarInsertProveedor.setForeground(new java.awt.Color(255, 255, 255));
        aceptarInsertProveedor.setText("Aceptar");
        aceptarInsertProveedor.setBorderPainted(false);
        aceptarInsertProveedor.setContentAreaFilled(false);
        aceptarInsertProveedor.setEnabled(false);
        aceptarInsertProveedor.setOpaque(true);
        aceptarInsertProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarInsertProveedorActionPerformed(evt);
            }
        });
        jPanel2.add(aceptarInsertProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 540, 100, 46));

        jLabel47.setFont(fuenteSans14B);
        jLabel47.setForeground(new java.awt.Color(25, 30, 111));
        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel47.setText("*Email:");
        jPanel2.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 150, 46));

        jLabel44.setFont(fuenteSans14B);
        jLabel44.setForeground(new java.awt.Color(25, 30, 111));
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel44.setText("*Razón social:");
        jPanel2.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 220, 46));

        maquinariaPCB.setFont(fuenteSans12P);
        jPanel2.add(maquinariaPCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 300, 46));

        jTabbedPane2.addTab("Agregar proveedor", jPanel2);

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ordenarProveedor.setFont(fuenteSans12P);
        ordenarProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Razon", "Maquinaria", "Representante", "Email", "Telefono", "Direccion" }));
        ordenarProveedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordenarProveedorItemStateChanged(evt);
            }
        });
        jPanel4.add(ordenarProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 210, 46));

        jScrollPane11.setBorder(null);
        jScrollPane11.setOpaque(false);
        jScrollPane11.setOpaque(false);
        jScrollPane11.getViewport().setOpaque(false);

        tablaProveedores.setFont(fuenteSans12P);
        tablaProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Razón social", "Maquinaria", "Representante", "Correo", "Telefono", "Dirrecion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProveedores.setOpaque(false);
        tablaProveedores.getTableHeader().setFont(fuenteSans12B);
        tablaProveedores.getTableHeader().setOpaque(false);
        tablaProveedores.getTableHeader().setBackground(azulF);
        tablaProveedores.getTableHeader().setForeground(Color.white);
        tablaProveedores.setRowHeight(30);
        jScrollPane11.setViewportView(tablaProveedores);

        jPanel4.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 82, 1077, 580));

        jLabel50.setFont(fuenteSans12B);
        jLabel50.setForeground(new java.awt.Color(25, 30, 111));
        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel50.setText("Ordenar por:");
        jPanel4.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, 46));

        matchBuscar1.setFont(fuenteSans12P);
        matchBuscar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matchBuscar1KeyReleased(evt);
            }
        });
        jPanel4.add(matchBuscar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 310, 46));

        jLabel51.setFont(fuenteSans12B);
        jLabel51.setForeground(new java.awt.Color(25, 30, 111));
        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel51.setText("Buscar:");
        jPanel4.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 100, 46));

        sortProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sortdesc.png"))); // NOI18N
        sortProveedor.setContentAreaFilled(false);
        sortProveedor.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/sortasc.png"))); // NOI18N
        sortProveedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortProveedorItemStateChanged(evt);
            }
        });
        jPanel4.add(sortProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 46, 46));

        jTabbedPane2.addTab("Lista de proveedores", jPanel4);

        panelProveedor.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 16, 1102, 736));

        Principal.add(panelProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelUsuario.setVisible(false);
        panelUsuario.setOpaque(false);
        panelUsuario.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane3.setForeground(new java.awt.Color(25, 30, 111));
        jTabbedPane3.setFont(fuenteSans16P);
        jTabbedPane3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane3StateChanged(evt);
            }
        });

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel34.setFont(fuenteSans14B);
        jLabel34.setForeground(new java.awt.Color(25, 30, 111));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Nombre de usuario:");
        jPanel3.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 160, 46));

        userTF.setFont(fuenteSans14P);
        userTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userTFKeyReleased(evt);
            }
        });
        jPanel3.add(userTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 260, 46));

        jLabel35.setFont(fuenteSans14B);
        jLabel35.setForeground(new java.awt.Color(25, 30, 111));
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Contraseña:");
        jPanel3.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 160, 46));

        passwordPF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passwordPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordPFKeyReleased(evt);
            }
        });
        jPanel3.add(passwordPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 290, 46));

        jLabel36.setFont(fuenteSans14B);
        jLabel36.setForeground(new java.awt.Color(25, 30, 111));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Confirmar contraseña:");
        jPanel3.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 210, 46));

        passwordPFConf.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        passwordPFConf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordPFConfKeyReleased(evt);
            }
        });
        jPanel3.add(passwordPFConf, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 290, 46));

        jLabel37.setFont(fuenteSans14B);
        jLabel37.setForeground(new java.awt.Color(25, 30, 111));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Nombre:");
        jPanel3.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, 210, 46));

        nombreUserTF.setFont(fuenteSans14P);
        nombreUserTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreUserTFKeyReleased(evt);
            }
        });
        ((AbstractDocument)nombreUserTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        jPanel3.add(nombreUserTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 290, 260, 46));

        jLabel38.setFont(fuenteSans14B);
        jLabel38.setForeground(new java.awt.Color(25, 30, 111));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Apellidos:");
        jPanel3.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 370, 210, 46));

        apellidoTF.setFont(fuenteSans14P);
        apellidoTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                apellidoTFKeyReleased(evt);
            }
        });
        ((AbstractDocument)nombreUserTF.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        jPanel3.add(apellidoTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 370, 380, 46));

        jLabel39.setFont(fuenteSans14B);
        jLabel39.setForeground(new java.awt.Color(25, 30, 111));
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel39.setText("Tipo de usuario:");
        jPanel3.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 450, 210, 46));

        tipoUser.setFont(fuenteSans14P);
        tipoUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Operador" }));
        jPanel3.add(tipoUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 450, 190, 46));

        aceptarCrearUsuario.setBackground(gris);
        aceptarCrearUsuario.setFont(fuenteSans14B);
        aceptarCrearUsuario.setForeground(new java.awt.Color(255, 255, 255));
        aceptarCrearUsuario.setText("Aceptar");
        aceptarCrearUsuario.setBorder(null);
        aceptarCrearUsuario.setBorderPainted(false);
        aceptarCrearUsuario.setContentAreaFilled(false);
        aceptarCrearUsuario.setEnabled(false);
        aceptarCrearUsuario.setOpaque(true);
        aceptarCrearUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarCrearUsuarioActionPerformed(evt);
            }
        });
        jPanel3.add(aceptarCrearUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 543, 90, 40));

        errorCrearUsername.setFont(fuenteSans14P);
        errorCrearUsername.setForeground(new java.awt.Color(255, 0, 0));
        errorCrearUsername.setText("Ya existe un usuario con este nombre de usuario");
        errorCrearUsername.setVisible(false);
        jPanel3.add(errorCrearUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, 430, 46));

        errorCrearPassword.setFont(fuenteSans14P);
        errorCrearPassword.setForeground(new java.awt.Color(255, 0, 0));
        errorCrearPassword.setText("La contraseña no coincide");
        errorCrearPassword.setVisible(false);
        jPanel3.add(errorCrearPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 430, 46));

        errorCrearPassword1.setFont(fuenteSans14P);
        errorCrearPassword1.setForeground(new java.awt.Color(255, 0, 0));
        errorCrearPassword1.setText("Longitud de la contraseña muy corta");
        errorCrearPassword1.setVisible(false);
        jPanel3.add(errorCrearPassword1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 430, 46));

        jTabbedPane3.addTab("Crear usuario", jPanel3);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane4.setOpaque(false);
        jScrollPane4.getViewport().setOpaque(false);

        tablaUsuarios.setDefaultRenderer(Object.class, new Render());
        tablaUsuarios.setFont(fuenteSans12P);
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de usuario", "Nombre", "Apellidos", "Administrar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaUsuarios.getTableHeader().setFont(fuenteSans14B);
        tablaUsuarios.getTableHeader().setOpaque(false);
        tablaUsuarios.getTableHeader().setBackground(azulF);
        tablaUsuarios.getTableHeader().setForeground(Color.white);
        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane14.setViewportView(tablaUsuarios);

        jPanel5.add(jScrollPane14, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 31, 878, 660));

        Usuario.setOpaque(false);
        Usuario.setRequestFocusEnabled(false);
        Usuario.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        regresarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/returnN.png"))); // NOI18N
        regresarUsuario.setBorderPainted(false);
        regresarUsuario.setContentAreaFilled(false);
        regresarUsuario.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/returnS.png"))); // NOI18N
        regresarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarUsuarioActionPerformed(evt);
            }
        });
        Usuario.add(regresarUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 50, 50));

        jLabel72.setFont(fuenteSans14B);
        jLabel72.setForeground(azulF);
        jLabel72.setText("Usuario:");
        Usuario.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 67, 76, 40));

        jLabel73.setFont(fuenteSans16B);
        jLabel73.setForeground(azulF);
        jLabel73.setText("Cambiar contraseña:");
        Usuario.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 260, 40));

        jLabel74.setFont(fuenteSans14B);
        jLabel74.setForeground(azulF);
        jLabel74.setText("Nombre:");
        Usuario.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 65, 40));

        jLabel75.setFont(fuenteSans14B);
        jLabel75.setForeground(azulF);
        jLabel75.setText("Apellidos:");
        Usuario.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 76, 40));

        jLabel76.setFont(fuenteSans14B);
        jLabel76.setForeground(azulF);
        jLabel76.setText("Contraseña:");
        Usuario.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 350, 116, 40));

        jLabel77.setFont(fuenteSans14B);
        jLabel77.setForeground(azulF);
        jLabel77.setText("Confirmar contraseña:");
        Usuario.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 200, 40));

        userLabel.setFont(fuenteSans14P);
        Usuario.add(userLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 372, 40));

        apellidosLabel.setFont(fuenteSans14P);
        Usuario.add(apellidosLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 210, 372, 40));

        nombreLabel.setFont(fuenteSans14P);
        Usuario.add(nombreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 372, 40));

        contrasenaConfAdmUser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        contrasenaConfAdmUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contrasenaConfAdmUserKeyReleased(evt);
            }
        });
        Usuario.add(contrasenaConfAdmUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 420, 336, 40));

        contrasenaAdmUser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        contrasenaAdmUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contrasenaAdmUserKeyReleased(evt);
            }
        });
        Usuario.add(contrasenaAdmUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 350, 336, 40));

        cambiarContAdmin.setBackground(gris);
        cambiarContAdmin.setFont(fuenteSans12B);
        cambiarContAdmin.setForeground(new java.awt.Color(255, 255, 255));
        cambiarContAdmin.setText("Guardar cambios");
        cambiarContAdmin.setContentAreaFilled(false);
        cambiarContAdmin.setEnabled(false);
        cambiarContAdmin.setOpaque(true);
        cambiarContAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarContAdminActionPerformed(evt);
            }
        });
        Usuario.add(cambiarContAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, -1, 40));

        errorContraAdm1.setFont(fuenteSans12P);
        errorContraAdm1.setForeground(new java.awt.Color(255, 0, 0));
        errorContraAdm1.setText("La contraseña no coincide");
        errorContraAdm1.setVisible(false);
        Usuario.add(errorContraAdm1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 480, 390, -1));

        errorContraAdm2.setFont(fuenteSans12P);
        errorContraAdm2.setForeground(new java.awt.Color(255, 0, 0));
        errorContraAdm2.setText("Longitud de la contraseña muy corta");
        errorContraAdm2.setVisible(false);
        Usuario.add(errorContraAdm2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 480, 360, -1));

        Usuario.setVisible(false);

        jPanel5.add(Usuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 21, 1050, 670));

        jTabbedPane3.addTab("Admistrar usuarios", jPanel5);

        panelUsuario.add(jTabbedPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 16, 1110, 730));

        Principal.add(panelUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelMaquinaria.setOpaque(false);
        panelMaquinaria.setVisible(false);
        panelMaquinaria.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel8.setOpaque(false);

        jLabel67.setFont(fuenteSans12B);
        jLabel67.setForeground(new java.awt.Color(25, 30, 111));
        jLabel67.setText("Nombre:");

        jLabel68.setFont(fuenteSans16B);
        jLabel68.setForeground(new java.awt.Color(25, 30, 111));
        jLabel68.setText("Agregar Maquinaria:");

        nombreMaquinariaTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreMaquinariaTFKeyReleased(evt);
            }
        });

        botonAgregarMaquinaria.setBackground(gris);
        botonAgregarMaquinaria.setFont(fuenteSans12B);
        botonAgregarMaquinaria.setForeground(new java.awt.Color(255, 255, 255));
        botonAgregarMaquinaria.setText("Agregar maquinaria");
        botonAgregarMaquinaria.setContentAreaFilled(false);
        botonAgregarMaquinaria.setEnabled(false);
        botonAgregarMaquinaria.setOpaque(true);
        botonAgregarMaquinaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarMaquinariaActionPerformed(evt);
            }
        });

        jScrollPane3.setOpaque(false);
        jScrollPane3.getViewport().setOpaque(false);

        tablaMaquinarias.setDefaultRenderer(Object.class, new Render());
        tablaMaquinarias.setFont(fuenteSans12P);
        tablaMaquinarias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Maquinaria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMaquinarias.getTableHeader().setFont(fuenteSans12B);
        tablaMaquinarias.getTableHeader().setOpaque(false);
        tablaMaquinarias.getTableHeader().setBackground(azulF);
        tablaMaquinarias.getTableHeader().setForeground(Color.white);
        tablaMaquinarias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMaquinariasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaMaquinarias);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel67)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(nombreMaquinariaTF, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonAgregarMaquinaria, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3))))
                .addContainerGap(464, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(nombreMaquinariaTF, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAgregarMaquinaria, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        panelMaquinaria.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, 510));

        Principal.add(panelMaquinaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelRegistro.setOpaque(false);
        panelRegistro.setVisible(false);
        panelRegistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ordenacion.setFont(fuenteSans12P);
        ordenacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Clave producto", "Nombre", "Fecha", "Cantidad", "Total", "Detalles" }));
        ordenacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ordenacionItemStateChanged(evt);
            }
        });
        panelRegistro.add(ordenacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 140, 40));

        jLabel12.setFont(fuenteSans14B);
        jLabel12.setForeground(new java.awt.Color(25, 30, 111));
        jLabel12.setText("Ordenar por:");
        panelRegistro.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 21, 105, 40));

        jScrollPane8.setOpaque(false);
        jScrollPane8.getViewport().setOpaque(false);

        tablaRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave producto", "Nombre", "Fecha", "Cantidad", "Total", "Detalles"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaRegistros.getTableHeader().setFont(fuenteSans12B);
        tablaRegistros.getTableHeader().setOpaque(false);
        tablaRegistros.getTableHeader().setBackground(azulF);
        tablaRegistros.getTableHeader().setForeground(Color.white);
        tablaRegistros.setRowHeight(30);
        jScrollPane8.setViewportView(tablaRegistros);

        panelRegistro.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 82, 1060, 665));

        fechaFinal.setBackground(new java.awt.Color(25, 30, 111));
        fechaFinal.setDateFormatString("dd/MM/yyyy");
        fechaFinal.setFont(fuenteSans12P);
        fechaFinal.getJCalendar().setMaxSelectableDate(new Date());
        fechaFinal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaFinalPropertyChange(evt);
            }
        });
        panelRegistro.add(fechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, 170, 40));

        fechaInicio.setBackground(new java.awt.Color(25, 30, 111));
        fechaInicio.setDateFormatString("dd/MM/yyyy");
        fechaInicio.setFont(fuenteSans12P);
        fechaInicio.getJCalendar().setMaxSelectableDate(fechaInicio.getDate());
        fechaInicio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fechaInicioPropertyChange(evt);
            }
        });
        panelRegistro.add(fechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 170, 40));

        jLabel56.setFont(fuenteSans12B);
        jLabel56.setForeground(new java.awt.Color(25, 30, 111));
        jLabel56.setText("Hasta:");
        panelRegistro.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 60, 40));

        jLabel57.setFont(fuenteSans12B);
        jLabel57.setForeground(new java.awt.Color(25, 30, 111));
        jLabel57.setText("Desde:");
        panelRegistro.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 60, 40));

        Principal.add(panelRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        panelConfiguracion.setOpaque(false);
        panelConfiguracion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel64.setFont(fuenteSans16B);
        jLabel64.setForeground(new java.awt.Color(25, 30, 111));
        jLabel64.setText("Cambiar contraseña");
        panelConfiguracion.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 68, 217, 33));

        cambiarContra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cambiarContraKeyReleased(evt);
            }
        });
        panelConfiguracion.add(cambiarContra, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 151, 400, 46));

        cambiarContraConf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cambiarContraConfKeyReleased(evt);
            }
        });
        panelConfiguracion.add(cambiarContraConf, new org.netbeans.lib.awtextra.AbsoluteConstraints(254, 235, 400, 46));

        jLabel65.setFont(fuenteSans12P);
        jLabel65.setForeground(new java.awt.Color(25, 30, 111));
        jLabel65.setText("Contraseña:");
        panelConfiguracion.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(77, 167, 123, -1));

        jLabel66.setFont(fuenteSans12P);
        jLabel66.setForeground(new java.awt.Color(25, 30, 111));
        jLabel66.setText("Confirmar contraseña:");
        panelConfiguracion.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(77, 251, 171, -1));

        errorContra2.setFont(fuenteSans12P);
        errorContra2.setForeground(new java.awt.Color(255, 0, 0));
        errorContra2.setText("La contraseña no coincide");
        errorContra2.setVisible(false);
        panelConfiguracion.add(errorContra2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 390, -1));

        cambiarContraButton.setBackground(gris);
        cambiarContraButton.setFont(fuenteSans12B);
        cambiarContraButton.setForeground(new java.awt.Color(255, 255, 255));
        cambiarContraButton.setText("Aceptar");
        cambiarContraButton.setBorderPainted(false);
        cambiarContraButton.setContentAreaFilled(false);
        cambiarContraButton.setEnabled(false);
        cambiarContraButton.setOpaque(true);
        cambiarContraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarContraButtonActionPerformed(evt);
            }
        });
        panelConfiguracion.add(cambiarContraButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 387, 90, 40));

        errorContra3.setFont(fuenteSans12P);
        errorContra3.setForeground(new java.awt.Color(255, 0, 0));
        errorContra3.setText("Longitud de la contraseña muy corta");
        errorContra3.setVisible(false);
        panelConfiguracion.add(errorContra3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 390, -1));

        exitoContra.setFont(fuenteSans12P);
        exitoContra.setForeground(new java.awt.Color(25, 30, 111));
        exitoContra.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitoContra.setText("Contraseña cambiada con exito");
        exitoContra.setVisible(true);
        panelConfiguracion.add(exitoContra, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 324, 410, 30));

        panelConfiguracion.setVisible(false);

        Principal.add(panelConfiguracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, 1102, 746));

        javax.swing.GroupLayout BackgroudLayout = new javax.swing.GroupLayout(Backgroud);
        Backgroud.setLayout(BackgroudLayout);
        BackgroudLayout.setHorizontalGroup(
            BackgroudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Login, javax.swing.GroupLayout.DEFAULT_SIZE, 1368, Short.MAX_VALUE)
            .addGroup(BackgroudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(BackgroudLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 2, Short.MAX_VALUE)))
        );
        BackgroudLayout.setVerticalGroup(
            BackgroudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(BackgroudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(BackgroudLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(Principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1378, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Backgroud, javax.swing.GroupLayout.DEFAULT_SIZE, 1378, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 779, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Backgroud, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void opcionesAdmin(boolean opc){
        proveedoresB.setVisible(opc);
        agregarProveedorB.setVisible(opc);
        EditarBoton.setVisible(opc);
    }
     
    private void login(){
        usuario = Account.getText();
        String clave = new String(Password.getPassword());
        try {
            Error1.setVisible(false);
            int re = bd.Login(url, usuario, clave);
            String nombre = bd.getNombreCuenta();
            mensajeBienvenida.setText("Bienvenido, "+nombre);
            if(re!=0){
                if(re==1){
                    Login.setVisible(false);
                    Principal.setVisible(true);
                    GestaltAdm.setVisible(true);
                    GestaltOp.setVisible(false);
                    admin=true;
                    opcionesAdmin(admin);
                }else{;
                    Login.setVisible(false);
                    Principal.setVisible(true);
                    GestaltAdm.setVisible(false);
                    GestaltOp.setVisible(true);
                    admin=false;
                    opcionesAdmin(admin);
                }
            }
        }catch (SQLException ex) {
            if(ex.getErrorCode()==1045){
                Error1.setVisible(true);
            }
            else{
                if(ex.getCause()!=null){
                    if(ex.getCause().toString().compareToIgnoreCase("java.net.ConnectException: Connection refused: connect")==0){
                        JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        JOptionPane.showMessageDialog (null, ex.getCause(), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog (null, "Error obteniendo la informacion del usuario", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void iniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarSesionActionPerformed
       login(); 
    }//GEN-LAST:event_iniciarSesionActionPerformed

    private void addImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addImageMouseClicked
        if(evt.getClickCount()>1){
            imagen = null;
            addImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarImgGrande.png")));
            imagenSel = false;
        }else{
            imagen = herramientas.LeerImagen();
            if(imagen!=null){
                Image imagenR = herramientas.getImagenR();
                addImage.setIcon(new ImageIcon(imagenR));
                imagenSel = true;
            }
        }
    }//GEN-LAST:event_addImageMouseClicked
    
    private void limpiarCampos(){
        claveDeProductoTF.setText("");
        nombreTF.setText("");
        maquinariaCB.removeAllItems();
        usoTF.setText("");
        descripcionTF.setText("");
        cantidadDisponibleTF.setText("0");
        minimoTF.setText("0");
        precioEstimadoTF.setText("0");
        listaUbicaciones.clear();
        listaProveedor.clear();
        autAgregarNombre=false;
        rep = true;
        agregar.setEnabled(false);
        agregar.setBackground(gris);
    }
 
    
    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        String claveProducto = claveDeProductoTF.getText();
        String nombreProducto = nombreTF.getText();
        String maquinaria = maquinariaCB.getSelectedItem()+"";
        int idMaquinaria = 0;
        String uso = usoTF.getText();
        String descripcion = descripcionTF.getText();
        int cantidadDisponible = Integer.parseInt(cantidadDisponibleTF.getText());
        String unidadMedida = uMedidaJCB.getSelectedItem().toString();
        int minimo = Integer.parseInt(minimoTF.getText());
        float precio = Float.parseFloat(precioEstimadoTF.getText());
        BufferedImage qr = null;
        BufferedImage img = imagen;
        int idInventario;
        int idZona;
        boolean creacionProducto = false;
        if(maquinaria.compareToIgnoreCase("Seleccionar")==0){
            maquinaria = "";
            idMaquinaria=0;
        }else{
            idMaquinaria=bd.consultaIdMaquinaria(maquinaria);
        }
        if(claveProducto.length()==0){    //Si no hay clave, se procedera a generar una
            generarClave dialogGC = new generarClave(new javax.swing.JFrame(), true, nombreProducto, bd.getCon());
            dialogGC.setVisible(true);
            claveProducto=dialogGC.getClaveGenerada();
        }
        if(!claveProducto.equalsIgnoreCase("-1")){
            try {
                bd.autocommit();
                idInventario = bd.insertarInventario(cantidadDisponible, precio, minimo);
                idZona = bd.buscarZona(Zona.getSelectedItem()+"");
                qr = herramientas.crearQR(claveProducto.toUpperCase(), 400, 400);
                InputStream isqr = herramientas.BufferedImage2InputStream(qr);
                if(imagenSel==true){
                    InputStream isIM = herramientas.BufferedImage2InputStream(imagen);
                    bd.agregarProducto(claveProducto, nombreProducto, idMaquinaria, uso, descripcion, unidadMedida, isqr, isIM, idInventario, idZona, imagenSel);
                }else{
                    bd.agregarProducto(claveProducto, nombreProducto, idMaquinaria, uso, descripcion, unidadMedida, isqr, null, idInventario, idZona, imagenSel);
                }
                bd.commit();
                bd.autocommit();
                creacionProducto=true;
                bd.insertarProductosProveedores(listaProveedor, claveProducto);
                bd.insertarUbicaciones(listaUbicaciones, claveProducto);
                correctAddProduct dialog = new correctAddProduct(new javax.swing.JFrame(), true, qr,nombreProducto,uso);
                dialog.setVisible(true);
                limpiarCampos();
            } catch (WriterException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                if(creacionProducto!=false){
                     JOptionPane.showMessageDialog (null, "Se a registrado el producto correctamente, pero ocurrio un problema durante el proceso", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else{
                     JOptionPane.showMessageDialog (null, "Error de conexión con la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void cantidadDisponibleTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadDisponibleTFKeyTyped
        herramientas.soloNumeros(evt);
    }//GEN-LAST:event_cantidadDisponibleTFKeyTyped

    private void cantidadDisponibleTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cantidadDisponibleTFMouseClicked
        cantidadDisponibleTF.selectAll();
    }//GEN-LAST:event_cantidadDisponibleTFMouseClicked

    private void minimoTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimoTFMouseClicked
        minimoTF.selectAll();
    }//GEN-LAST:event_minimoTFMouseClicked

    private void minimoTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimoTFKeyTyped
        herramientas.soloNumeros(evt);
    }//GEN-LAST:event_minimoTFKeyTyped

    private void precioEstimadoTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precioEstimadoTFMouseClicked
        precioEstimadoTF.selectAll();
    }//GEN-LAST:event_precioEstimadoTFMouseClicked

    private void precioEstimadoTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioEstimadoTFKeyTyped
        herramientas.soloFlotantes(evt, precioEstimadoTF.getText());
    }//GEN-LAST:event_precioEstimadoTFKeyTyped

    private void menosCDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menosCDButtonActionPerformed
        int u = Integer.parseInt(cantidadDisponibleTF.getText());
        if(u>0){
            u-=1;
            cantidadDisponibleTF.setText(u+"");
        }
    }//GEN-LAST:event_menosCDButtonActionPerformed

    private void masCDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masCDButtonActionPerformed
        int u = Integer.parseInt(cantidadDisponibleTF.getText());
        u+=1;
        cantidadDisponibleTF.setText(u+"");
    }//GEN-LAST:event_masCDButtonActionPerformed

    private void menosMinimoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menosMinimoButtonActionPerformed
        int u = Integer.parseInt(minimoTF.getText());
        if(u>0){
            u-=1;
            minimoTF.setText(u+"");
        }
    }//GEN-LAST:event_menosMinimoButtonActionPerformed

    private void minimoMasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimoMasButtonActionPerformed
        int u = Integer.parseInt(minimoTF.getText());
        u+=1;
        minimoTF.setText(u+"");
    }//GEN-LAST:event_minimoMasButtonActionPerformed

    
    private void UbicacionTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UbicacionTFKeyPressed
        if(UbicacionTF.getText().length()>0){
            agregarUbicacion.setEnabled(true);
            agregarUbicacion.setBackground(azulF);
        }else{
            agregarUbicacion.setEnabled(false);
            agregarUbicacion.setBackground(gris);
        }
        if(evt.getKeyCode()==10){
            listaUbicaciones.addElement(UbicacionTF.getText());
            UbicacionTF.setText("");
        }
    }//GEN-LAST:event_UbicacionTFKeyPressed

    private void PasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordKeyPressed
        if(evt.getKeyCode()==10){
            login();
        }
    }//GEN-LAST:event_PasswordKeyPressed

    private void agregarUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarUbicacionActionPerformed
        listaUbicaciones.addElement(UbicacionTF.getText());
        UbicacionTF.setText("");
    }//GEN-LAST:event_agregarUbicacionActionPerformed

    private void listaUbicacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaUbicacionMouseClicked
        if(evt.getClickCount()==2){
            listaUbicaciones.removeElement(listaUbicacion.getSelectedValue());
            listaUbicacion.clearSelection();
        }
    }//GEN-LAST:event_listaUbicacionMouseClicked

    private void UbicacionTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UbicacionTFFocusLost
        listaUbicaciones.addElement(UbicacionTF.getText());
        UbicacionTF.setText("");
    }//GEN-LAST:event_UbicacionTFFocusLost
    
    private void tablaRegistroProducto(){
        DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
        String f1 = DF.format(fechaBIn);
        f1 = f1+" 00:00:00";
        String f2 = DF.format(fechaBFin);
        f2 = f2+" 23:59:59";
        eSProducto=bd.obtenerInfoRegistros(bd.getClaveProducto(),f1,f2);
        int e=0;
        int s=0;
        for(int i=0;i<eSProducto.length;i++){
            if(Integer.parseInt(eSProducto[i][1])>0){
                e+=1;
            }
            else{
                s+=1;
            }
        }
        entradasProducto = new String[e][3];
        salidasProducto = new String[s][4];
        e=0;
        s=0;
        for(int i=0;i<eSProducto.length;i++){
            if(Integer.parseInt(eSProducto[i][1])>0){
                entradasProducto[e][0]=eSProducto[i][0];
                entradasProducto[e][1]=eSProducto[i][1];
                entradasProducto[e][2]=eSProducto[i][3];
                e+=1;
            }
            else{
                salidasProducto[s][0]=eSProducto[i][0];
                salidasProducto[s][1]=eSProducto[i][1].substring(1);
                salidasProducto[s][3]=eSProducto[i][2];
                salidasProducto[s][2]=eSProducto[i][3];
                s+=1;
            }
        }
        tablaEntradasSalidas.setModel(new javax.swing.table.DefaultTableModel(
            entradasProducto,
            new String [] {
                "Día", "Cantidad", "Detalles"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    
    private void setInfo(String buscar) throws SQLException, IOException{
        bd.obtenerProducto(buscar);
        claveB.setText(bd.getClaveProducto());
        nombreB.setText(bd.getNombreProducto());
        maquinariaBCB.removeAllItems();
        ArrayList<String> maquinaria = bd.listarMaquinaria();
        for(int i=0;i<maquinaria.size();i++){
            maquinariaBCB.addItem(maquinaria.get(i));
        }
        maquinariaBCB.setSelectedItem(bd.getMaquinariaProducto());
        usoB.setText(bd.getUsoProducto());
        descripcionB.setText(bd.getDescripcionProducto());
        precioB.setText(bd.getPrecio()+"");
        minimosB.setText(bd.getMinimoProducto()+"");
        disponiblesB.setText(bd.getCantidadDisponible()+" "+bd.getuMedidaProducto());
        uMedidaB.setSelectedItem(bd.getuMedidaProducto());
        if(bd.getImagenProducto()!=null){
            bModImagen.setIcon(new ImageIcon(bd.getImagenProducto()));
        }
        listaProveedorB.removeAllElements();
        ArrayList<String> proveedores = bd.getProveedores();
        if(proveedores!=null){
            for(int i=0;i<proveedores.size();i++){
                listaProveedorB.addElement(proveedores.get(i));
            }
        }
        proveedoresB.removeAllItems();
        proveedores = bd.listarProveedores();
        if(proveedores!=null){
            for(int i=0;i<proveedores.size();i++){
                proveedoresB.addItem(proveedores.get(i));
            }
        }
        listaUbicacionesB.clear();
        ArrayList<String> ubicaciones = bd.getUbicaciones();
        for(int i=0;i<ubicaciones.size();i++){
            listaUbicacionesB.addElement(ubicaciones.get(i));
        }
        //Establecer tabla
        tablaRegistroProducto();
    }
    
    private void cantidadDisponibleTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cantidadDisponibleTFFocusLost
        if(cantidadDisponibleTF.getText().length()==0){
            cantidadDisponibleTF.setText("0");
        }
    }//GEN-LAST:event_cantidadDisponibleTFFocusLost

    private void minimoTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minimoTFFocusLost
        if(minimoTF.getText().length()==0){
            minimoTF.setText("0");
        }
    }//GEN-LAST:event_minimoTFFocusLost

    private void precioEstimadoTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_precioEstimadoTFFocusLost
        if(precioEstimadoTF.getText().length()==0){
            precioEstimadoTF.setText("0");
        }else{
            String text = precioEstimadoTF.getText();
            if(text.length()>0){
                float aux = Float.parseFloat(text);
                precioEstimadoTF.setText(aux+"");
                precioEstimadoTF.setCaretPosition(precioEstimadoTF.getText().length());
            }
        }
    }//GEN-LAST:event_precioEstimadoTFFocusLost

    private void EditarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarBotonActionPerformed
        boolean opc;
        if(EditarBoton.isSelected()){
            opc = true;
            guardarBusqueda.setVisible(opc);
            if(eSProducto.length>0){
                borrarProd.setVisible(false);
                borrarProd.setEnabled(false);
            }else{
                borrarProd.setVisible(opc);
                borrarProd.setEnabled(opc);
            }
        }
        else{
            opc = false;
            guardarBusqueda.setVisible(opc);
            borrarProd.setVisible(opc);
            borrarProd.setEnabled(opc);
        }
        claveB.setOpaque(opc);
        claveB.setEnabled(opc);
        nombreB.setOpaque(opc);
        nombreB.setEnabled(opc);
        maquinariaBCB.setOpaque(opc);
        maquinariaBCB.setEnabled(opc);
        usoB.setOpaque(opc);
        usoB.setEnabled(opc);
        descripcionB.setOpaque(opc);
        descripcionB.setEnabled(opc);
        uMedidaB.setVisible(opc);
        precioB.setOpaque(opc);
        precioB.setEnabled(opc);
        minimosB.setOpaque(opc);
        minimosB.setEnabled(opc);
        jLabel52.setVisible(opc);
    }//GEN-LAST:event_EditarBotonActionPerformed

    private void MostrarResultadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MostrarResultadosItemStateChanged
        if(MostrarResultados.getSelectedIndex()==0){
            tablaEntradasSalidas.setModel(new javax.swing.table.DefaultTableModel(
                entradasProducto,
                new String [] {
                    "Día", "Cantidad", "Detalles"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
        }
        else{
            tablaEntradasSalidas.setModel(new javax.swing.table.DefaultTableModel(
                salidasProducto,
                new String [] {
                    "Día", "Cantidad", "Detalles", "Total"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
        }
    }//GEN-LAST:event_MostrarResultadosItemStateChanged

    private void nombreBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreBKeyReleased
        herramientas.compararNombre(nombreB.getText(), bd.getNombreProducto());
        cambios = herramientas.getCambios();
        verificarCambios();
    }//GEN-LAST:event_nombreBKeyReleased

    private void descripcionBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descripcionBKeyReleased
        herramientas.compararDescripcion(descripcionB.getText(), bd.getDescripcionProducto());
        cambios = herramientas.getCambios();
        verificarCambios();
    }//GEN-LAST:event_descripcionBKeyReleased

    private void precioBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioBKeyReleased
        if(precioB.getText().length()>0){
            herramientas.compararPrecio(Float.parseFloat(precioB.getText()), bd.getPrecio());
            cambios = herramientas.getCambios();
            verificarCambios();
        }
    }//GEN-LAST:event_precioBKeyReleased

    private void modificaGuardarCambios(boolean opc){
        guardarBusqueda.setEnabled(opc);
        if(opc == true){
            guardarBusqueda.setBackground(azulF);
        }else{
            guardarBusqueda.setBackground(gris);
        }
    }
    
    private void verificarCambios(){
        int c=0;
        for(int i=0;i<cambios.length;i++){
            c+=cambios[i];
        }
        if(c>0){
            modificaGuardarCambios(true);
        }else{
            modificaGuardarCambios(false);
        }
    }
    
    private void minimosBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimosBKeyReleased
        if(minimosB.getText().length()>0){
            herramientas.compararMinimo(Integer.parseInt(minimosB.getText()), bd.getMinimoProducto());
            cambios = herramientas.getCambios();
            verificarCambios();
        }
    }//GEN-LAST:event_minimosBKeyReleased

    private void claveBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_claveBKeyReleased
        herramientas.compararClaveProducto(claveB.getText(), bd.getClaveProducto());
        cambios = herramientas.getCambios();
        verificarCambios();
    }//GEN-LAST:event_claveBKeyReleased


    private void guardarBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBusquedaActionPerformed
        try {
            bd.guardarCambiosProducto(cambios, bd.getClaveProducto(), bd.getIdInventario(), (String)maquinariaBCB.getSelectedItem(), claveB.getText(), nombreB.getText(), usoB.getText(), descripcionB.getText(), (String)uMedidaB.getSelectedItem(),imagenProducto);
            imagenSel=false;
            bd.guardarCambiosInventario(cambios, precioB.getText(), minimosB.getText());
            guardarBusqueda.setEnabled(false);
            guardarBusqueda.setBackground(gris);
            EditarBoton.doClick();
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriterException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarBusquedaActionPerformed

    private void bModImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bModImagenMouseClicked
        if(EditarBoton.isSelected()){
            imagenProducto = herramientas.LeerImagen();
            if(imagenProducto!=null){
                Image imagenR = herramientas.getImagenR();
                bModImagen.setIcon(new ImageIcon(imagenR));
                modImagen=true;
                herramientas.compararModImagen(modImagen);
            }
        }
    }//GEN-LAST:event_bModImagenMouseClicked

    private void precioBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioBKeyTyped
        herramientas.soloNumeros(evt);
    }//GEN-LAST:event_precioBKeyTyped

    private void minimosBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimosBKeyTyped
        herramientas.soloNumeros(evt);
    }//GEN-LAST:event_minimosBKeyTyped

    private void nombreBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nombreBMouseClicked
        nombreB.setCaretPosition(nombreB.getText().length());
    }//GEN-LAST:event_nombreBMouseClicked

    private void descripcionBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descripcionBMouseClicked
        descripcionB.setCaretPosition(descripcionB.getText().length());
    }//GEN-LAST:event_descripcionBMouseClicked

    private void precioBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_precioBMouseClicked
        precioB.setCaretPosition(precioB.getText().length());
    }//GEN-LAST:event_precioBMouseClicked

    private void minimosBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimosBMouseClicked
        minimosB.setCaretPosition(minimosB.getText().length());
    }//GEN-LAST:event_minimosBMouseClicked

    private void claveBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_claveBMouseClicked
        claveB.setCaretPosition(claveB.getText().length());
    }//GEN-LAST:event_claveBMouseClicked

    private void pSHButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pSHButtonActionPerformed
        if(pSHButton.isSelected()){
            pSHButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/show.png")));
             Password.setEchoChar((char)0);
        }else{
            pSHButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hide.png")));
            Password.setEchoChar('*');
        }
    }//GEN-LAST:event_pSHButtonActionPerformed

    private void estableceTablaRegistro(String[][] res){
        tablaRegistros.setModel(new javax.swing.table.DefaultTableModel(
            res,
            new String [] {
                "Clave producto", "Nombre", "Fecha", "Cantidad", "Total", "Detalles"
            }
            ) {
                boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
                };
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
        });
    }
    
    private void registroBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registroBotonActionPerformed
        rogeriLogo.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelAgregarProducto.setVisible(false);
        panelUsuario.setVisible(false);
        panelConsultarProductos.setVisible(false);
        panelProveedor.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelConfiguracion.setVisible(false);
        panelRegistro.setVisible(true);
        Date date = new Date();       
        fechaFinal.setDate(date);
        fechaRegFin = fechaFinal.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, -1);
        fechaInicio.setDate(calendar.getTime());
        fechaRegIn = fechaInicio.getDate();
        try {
            //actualizar tabla
            DateFormat DF = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String f1 = DF.format(fechaRegIn);
            f1 = f1+" 00:00:00";
            String f2 = DF.format(fechaRegFin);
            f2 = f2+" 23:59:59";
            String[][] res = bd.listarRegistroIn("idProducto", f1, f2);
            if(res!=null){
                estableceTablaRegistro(res);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_registroBotonActionPerformed

    private void agregarUbicacionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarUbicacionBActionPerformed
        try {
            String ubicacion = ubicacionesB.getText();
            listaUbicacionesB.addElement(ubicacion);
            ubicacionesB.setText("");
            bd.insertarUbicacion(ubicacion, bd.getClaveProducto());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_agregarUbicacionBActionPerformed

    private void listaUbicacionBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaUbicacionBMouseClicked
        if(evt.getClickCount()==2){
            String delUbicacion = listaUbicacionB.getSelectedValue();
            if(delUbicacion.length()>0){
                try {
                    listaUbicacionesB.removeElement(listaUbicacionB.getSelectedValue());
                    listaUbicacionB.clearSelection();
                    bd.eliminarUbicacion(delUbicacion, bd.getClaveProducto());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_listaUbicacionBMouseClicked

    private void listaUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listaUbicacionKeyPressed
        if(evt.getKeyCode()==10){
            try {
                String ubicacion = ubicacionesB.getText();
                listaUbicacionesB.addElement(ubicacion);
                ubicacionesB.setText("");
                bd.insertarUbicacion(ubicacion, bd.getClaveProducto());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_listaUbicacionKeyPressed

    private void nombreTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTFKeyReleased
        if(nombreTF.getText().length()>0){
            autAgregarNombre=true;
        }
        else{
            autAgregarNombre=false;
        }
        if(autAgregarNombre==true && rep==false){
            agregar.setEnabled(true);
            agregar.setBackground(azulF);
        }
        else{
            agregar.setEnabled(false);
            agregar.setBackground(gris);
        }
    }//GEN-LAST:event_nombreTFKeyReleased

    private void entradasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradasButtonActionPerformed
        try {
            entradasProducto eD = new entradasProducto(new javax.swing.JFrame(), true, bd.getClaveProducto(), bd.getCon(),usuario);
            eD.setVisible(true);
            /*ventanaFeed vf = new ventanaFeed(null, true, "Entrada realizada con exito");
            vf.setVisible(true);*/
            DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
            String f1 = DF.format(fechaBIn);
            f1 = f1+" 00:00:00";
            String f2 = DF.format(fechaBFin);
            f2 = f2+" 23:59:59";
            setInfo(bd.getClaveProducto()/*, f1,f2*/);
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_entradasButtonActionPerformed

    private void salidasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salidasButtonActionPerformed
        try {
            salidasProducto sD = new salidasProducto(new javax.swing.JFrame(), true, bd.getClaveProducto(), bd.getCon(),usuario,bd.getPrecio(),bd.getCantidadDisponible());
            sD.setVisible(true);
            DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
            String f1 = DF.format(fechaBIn);
            f1 = f1+" 00:00:00";
            String f2 = DF.format(fechaBFin);
            f2 = f2+" 23:59:59";
            setInfo(bd.getClaveProducto()/*, f1,f2*/);
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_salidasButtonActionPerformed

    private void ordenacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ordenacionItemStateChanged
        String opc = "";
        if(ordenacion.getSelectedIndex()!=0){
            switch(ordenacion.getSelectedIndex()){
                case 1:
                    opc = "idProductos";
                    break;
                case 2:
                    opc = "nombre";
                    break;
                case 3:
                    opc = "fecha";
                    break;
                case 4:
                    opc = "cantidad";
                    break;
                case 5:
                    opc = "total";
                    break;
                case 6:
                    opc = "detalles";
                    break;
            }
            try {
                //actualizar tabla
                String[][] res = bd.listarRegistroIn(opc, fechaRegIn.toString(), fechaRegFin.toString());
                estableceTablaRegistro(res);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ordenacionItemStateChanged

    private void imprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirActionPerformed
        try {
            PDF pd = new PDF(bd.getQrProducto(), bd.getNombreProducto(), bd.getUsoProducto());
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirActionPerformed

    private void claveDeProductoTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_claveDeProductoTFKeyReleased
        try {
            if(claveDeProductoTF.getText().length()>0){
                if(bd.existeProducto(claveDeProductoTF.getText())){
                    ErrorID.setVisible(true);
                    rep=true;
                    agregar.setEnabled(false);
                    agregar.setBackground(gris);
                }
                else{
                    ErrorID.setVisible(false);
                    rep=false;
                    if(autAgregarNombre==true && rep==false){
                        agregar.setEnabled(true);
                        agregar.setBackground(azulF);
                    }
                    else{
                        agregar.setEnabled(false);
                        agregar.setBackground(gris);
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_claveDeProductoTFKeyReleased

    private void agregarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarProductosActionPerformed
        rogeriLogo.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelRegistro.setVisible(false);
        panelUsuario.setVisible(false);
        panelConsultarProductos.setVisible(false);
        panelProveedor.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelConfiguracion.setVisible(false);
        panelAgregarProducto.setVisible(true);
        try {
            maquinariaCB.removeAllItems();
            maquinariaCB.addItem("SELECCIONAR");
            ArrayList<String> maquinaria = bd.listarMaquinaria();
            for(int i=0;i<maquinaria.size();i++){
                maquinariaCB.addItem(maquinaria.get(i));
            }
            Zona.removeAllItems();
            ArrayList<String> zonas = bd.listarZona();
            for(int i=0;i<zonas.size();i++){
                Zona.addItem(zonas.get(i));
            }
            ProveedoresCB.removeAllItems();
            ArrayList<String> proveedores = bd.listarProveedores();
            if(proveedores.size()>0){
                agregarProveedor.setEnabled(true);
                agregarProveedor.setBackground(azulF);
                for(int i=0;i<proveedores.size();i++){
                    ProveedoresCB.addItem(proveedores.get(i));
                }
            }else{
                agregarProveedor.setEnabled(false);
                agregarProveedor.setBackground(gris);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog (null, "Error de conexion con la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregarProductosActionPerformed

    private void agregarUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarUsersActionPerformed
        rogeriLogo.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelAgregarProducto.setVisible(false);
        panelRegistro.setVisible(false);
        panelProveedor.setVisible(false);
        panelConsultarProductos.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelConfiguracion.setVisible(false);
        panelUsuario.setVisible(true);
    }//GEN-LAST:event_agregarUsersActionPerformed

    private void listaProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaProveedoresMouseClicked
        if(evt.getClickCount()==2){
            String proveedorEl = listaProveedor.getElementAt(listaProveedores.getSelectedIndex());
            listaProveedor.removeElementAt(listaProveedores.getSelectedIndex());
            ProveedoresCB.addItem(proveedorEl);
            if(ProveedoresCB.getItemCount()>0){
                agregarProveedor.setEnabled(true);
                agregarProveedor.setBackground(azulF);
            }else{
                agregarProveedor.setEnabled(false);
                agregarProveedor.setBackground(gris);
            }
        }
    }//GEN-LAST:event_listaProveedoresMouseClicked

    private void userTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTFKeyReleased
        String user = userTF.getText();
        try {
            if(bd.verificaUsuario(user)){
                errorCrearUsername.setVisible(true);
                usuarioExiste=true;
            }else{
                errorCrearUsername.setVisible(false);
                usuarioExiste=false;
            }
            if(apellidoUsuario && nombreUsuario && contrasenaUsuario && !usuarioExiste){
                aceptarCrearUsuario.setEnabled(true);
                aceptarCrearUsuario.setBackground(azulF);
            }else{
                aceptarCrearUsuario.setEnabled(false);
                aceptarCrearUsuario.setBackground(gris);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userTFKeyReleased

    private void passwordPFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordPFKeyReleased
        String clave1 = new String(passwordPF.getPassword());
        String clave2 = new String(passwordPFConf.getPassword());
        contrasenaUsuario=herramientas.contrasenasGUI(clave1,clave2,errorCrearPassword,errorCrearPassword1);
        if(apellidoUsuario && nombreUsuario && contrasenaUsuario && !usuarioExiste){
            aceptarCrearUsuario.setEnabled(true);
            aceptarCrearUsuario.setBackground(azulF);
        }else{
            aceptarCrearUsuario.setEnabled(false);
            aceptarCrearUsuario.setBackground(gris);
        }
    }//GEN-LAST:event_passwordPFKeyReleased

    private void passwordPFConfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordPFConfKeyReleased
        String clave1 = new String(passwordPF.getPassword());
        String clave2 = new String(passwordPFConf.getPassword());
        contrasenaUsuario=herramientas.contrasenasGUI(clave1,clave2,errorCrearPassword,errorCrearPassword1);
        if(apellidoUsuario && nombreUsuario && contrasenaUsuario && !usuarioExiste){
            aceptarCrearUsuario.setEnabled(true);
            aceptarCrearUsuario.setBackground(azulF);
        }else{
            aceptarCrearUsuario.setEnabled(false);
            aceptarCrearUsuario.setBackground(gris);
        }
    }//GEN-LAST:event_passwordPFConfKeyReleased

    private void nombreUserTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreUserTFKeyReleased
        if(nombreUserTF.getText().length()>0)
            nombreUsuario = true;
        if(apellidoUsuario && nombreUsuario && contrasenaUsuario && !usuarioExiste){
            aceptarCrearUsuario.setEnabled(true);
            aceptarCrearUsuario.setBackground(azulF);
        }else{
            aceptarCrearUsuario.setEnabled(false);
            aceptarCrearUsuario.setBackground(gris);
        }
    }//GEN-LAST:event_nombreUserTFKeyReleased

    private void apellidoTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apellidoTFKeyReleased
        if(apellidoTF.getText().length()>0)
            apellidoUsuario = true;
        if(apellidoUsuario && nombreUsuario && contrasenaUsuario && !usuarioExiste){
            aceptarCrearUsuario.setEnabled(true);
            aceptarCrearUsuario.setBackground(azulF);
        }else{
            aceptarCrearUsuario.setEnabled(false);
            aceptarCrearUsuario.setBackground(gris);
        }
    }//GEN-LAST:event_apellidoTFKeyReleased

    private void vaciaCamposCreaUsuario(){
        userTF.setText("");
        passwordPF.setText("");
        passwordPFConf.setText("");
        nombreUserTF.setText("");
        apellidoTF.setText("");
    }
    
    private void aceptarCrearUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarCrearUsuarioActionPerformed
        try {
            ventanaFeed dialog = new ventanaFeed(new javax.swing.JFrame(), true, "Usuario creado con exito");
            String usuario = userTF.getText();
            String contrasena= new String(passwordPF.getPassword());
            String nombre = nombreUserTF.getText();
            String apellido = apellidoTF.getText();
            bd.creaUsuario(tipoUser.getSelectedIndex(), usuario, contrasena, apellido, nombre);
            dialog.setVisible(true);
            userTF.setText("");
            passwordPF.setText("");
            passwordPFConf.setText("");
            nombreUserTF.setText("");
            apellidoTF.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aceptarCrearUsuarioActionPerformed

    private void AccountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AccountKeyReleased
        String cuenta = Account.getText();
        String password = new String(Password.getPassword());
        if(cuenta.length()>0 && password.length()>0){
                iniciarSesion.setEnabled(true);
                iniciarSesion.setBackground(azulF);
        }else{
            iniciarSesion.setEnabled(false);
            iniciarSesion.setBackground(gris);
        }
    }//GEN-LAST:event_AccountKeyReleased

    private void PasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordKeyReleased
        String cuenta = Account.getText();
        String password = new String(Password.getPassword());
        
        if(cuenta.length()>0 && password.length()>0){
                iniciarSesion.setEnabled(true);
                iniciarSesion.setBackground(azulF);
        }else{
            iniciarSesion.setEnabled(false);
            iniciarSesion.setBackground(gris);
        }
    }//GEN-LAST:event_PasswordKeyReleased

    private void proveedorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proveedorButtonActionPerformed
        try {
            rogeriLogo.setVisible(false);
            panelAgregarProducto.setVisible(false);
            panelUsuario.setVisible(false);
            panelMostrarProducto.setVisible(false);
            panelConsultarProductos.setVisible(false);
            panelRegistro.setVisible(false);
            panelMaquinaria.setVisible(false);
            panelConfiguracion.setVisible(false);
            panelProveedor.setVisible(true);
            maquinariaPCB.removeAllItems();
            maquinariaPCB.addItem("Seleccionar");
            ArrayList<String> maquinaria = bd.listarMaquinaria();
            for(int i=0;i<maquinaria.size();i++){
                maquinariaPCB.addItem(maquinaria.get(i));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_proveedorButtonActionPerformed

    private void telefonoPTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefonoPTFKeyTyped
        herramientas.soloNumeros(evt);
    }//GEN-LAST:event_telefonoPTFKeyTyped

    private void emailPTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailPTFKeyReleased
        String correo = emailPTF.getText();
        if(correo.length()!=0){
            Matcher mather = correoPattern.matcher(correo);
            if(mather.find()==true){
                errorCorreo.setVisible(false);
                email=true;
            }else{
                errorCorreo.setVisible(true);
                email=false;
            }
        }
        if(!razonVacio && !representanteVacio && email && !telefonoVacio && !direccionVacio){
            aceptarInsertProveedor.setEnabled(true);
            aceptarInsertProveedor.setBackground(azulF);
        }else{
            aceptarInsertProveedor.setEnabled(false);
            aceptarInsertProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_emailPTFKeyReleased

    private void razonTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_razonTFKeyReleased
        String aux = razonTF.getText();
        if(aux.length()!=0){
            razonVacio=false;
        }
        else{
            razonVacio=true;
        }
        if(!razonVacio && !representanteVacio && email && !telefonoVacio && !direccionVacio){
            aceptarInsertProveedor.setEnabled(true);
            aceptarInsertProveedor.setBackground(azulF);
        }else{
            aceptarInsertProveedor.setEnabled(false);
            aceptarInsertProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_razonTFKeyReleased

    private void repPTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_repPTFKeyReleased
        String aux = repPTF.getText();
        if(aux.length()!=0){
            representanteVacio=false;
        }
        else{
            representanteVacio=true;
        }
        if(!razonVacio && !representanteVacio && email && !telefonoVacio && !direccionVacio){
            aceptarInsertProveedor.setEnabled(true);
            aceptarInsertProveedor.setBackground(azulF);
        }else{
            aceptarInsertProveedor.setEnabled(false);
            aceptarInsertProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_repPTFKeyReleased

    private void telefonoPTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefonoPTFKeyReleased
        String aux = telefonoPTF.getText();
        if(aux.length()!=0){
            telefonoVacio=false;
        }
        else{
            telefonoVacio=true;
        }
        if(!razonVacio && !representanteVacio && email && !telefonoVacio && !direccionVacio){
            aceptarInsertProveedor.setEnabled(true);
            aceptarInsertProveedor.setBackground(azulF);
        }else{
            aceptarInsertProveedor.setEnabled(false);
            aceptarInsertProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_telefonoPTFKeyReleased

    private void direccionTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_direccionTFKeyReleased
        String aux = direccionTF.getText();
        if(aux.length()!=0){
            direccionVacio=false;
        }
        else{
            direccionVacio=true;
        }
        if(!razonVacio && !representanteVacio && email && !telefonoVacio && !direccionVacio){
            aceptarInsertProveedor.setEnabled(true);
            aceptarInsertProveedor.setBackground(azulF);
        }else{
            aceptarInsertProveedor.setEnabled(false);
            aceptarInsertProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_direccionTFKeyReleased

    private void estableceTablaProductos(String[][] res){
        tablaConsultaProductos.setModel(new javax.swing.table.DefaultTableModel(
            res,
            new String [] {
                "Clave", "Nombre", "Maquinaria", "Uso", "Descripción", "Disponible", "Precio", "Minimo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    
    private void ordenacion1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ordenacion1ItemStateChanged
        if(!logout){
            listaProductosAction();
        }
    }//GEN-LAST:event_ordenacion1ItemStateChanged

    private void matchBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matchBuscarKeyReleased
        if(!logout){
            listaProductosAction();
        }
    }//GEN-LAST:event_matchBuscarKeyReleased

    private void ordenaProveedor(){
        String opc = "razon";
        String sort = "";
        switch(ordenarProveedor.getSelectedIndex()){
            case 1:
                opc = "razon";
                break;
            case 2:
                opc = "maquinaria";
                break;
            case 3:
                opc = "representante";
                break;
            case 4:
                opc = "email";
                break;
            case 5:
                opc = "telefono";
                break;
            case 6:
                opc = "direccion";
                break;
        }
        try {
            String matchAux = matchBuscar1.getText();
            if(sortProveedor.isSelected()){
                sort = "DESC";
            }else{
                sort = "ASC";
            }
            String[][] res = bd.listarProveedores(matchAux, opc, sort);
            estableceTablaProveedores(res);
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        if(jTabbedPane2.getSelectedIndex()==1){
            ordenaProveedor();
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void ordenarProveedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ordenarProveedorItemStateChanged
        if(!logout)
            ordenaProveedor();
    }//GEN-LAST:event_ordenarProveedorItemStateChanged

    private void aceptarInsertProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarInsertProveedorActionPerformed
        String razon = razonTF.getText();
        String maquinaria = (String) maquinariaPCB.getSelectedItem();
        String representante = repPTF.getText();
        String correo = emailPTF.getText();
        String telefono = telefonoPTF.getText();
        String direccion = direccionTF.getText();
        try {
            int idMaquinaria=0;
            if(maquinaria.compareToIgnoreCase("Seleccionar")!=0){
                idMaquinaria = bd.consultaIdMaquinaria(maquinaria);
            }
            bd.insertarProveedor(razon, idMaquinaria, representante, correo, telefono, direccion);
            ventanaFeed CCP = new ventanaFeed(null, true, "Proveedor agregado con exito");
            CCP.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_aceptarInsertProveedorActionPerformed

    private void estableceTablaProveedores(String[][] res){
        tablaProveedores.setModel(new javax.swing.table.DefaultTableModel(
            res,
            new String [] {
            "Razón social", "Maquinaria", "Representante", "Correo", "Telefono", "Dirrecion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false
            };
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    
    private void matchBuscar1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matchBuscar1KeyReleased
        if(!logout)
            ordenaProveedor();
    }//GEN-LAST:event_matchBuscar1KeyReleased

    private void usoBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usoBMouseClicked
        usoB.setCaretPosition(usoB.getText().length());
    }//GEN-LAST:event_usoBMouseClicked

    private void usoBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usoBKeyReleased
        herramientas.compararUso(usoB.getText(), bd.getUsoProducto());
        cambios = herramientas.getCambios();
        verificarCambios();
    }//GEN-LAST:event_usoBKeyReleased

    private void listaProveedoresBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaProveedoresBMouseClicked
        if(evt.getClickCount()>1){
            if(admin){
                String aux = listaProveedoresB.getSelectedValue();
                if(aux.length()>0){
                    try {
                        listaProveedorB.removeElement(aux);
                        proveedoresB.addItem(aux);
                        listaProveedoresB.clearSelection();
                        bd.eliminarProductoProveedor(aux, bd.getClaveProducto());
                    } catch (SQLException ex) {
                        Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_listaProveedoresBMouseClicked

    private void agregarProveedorBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarProveedorBActionPerformed
        try {
            String aux = (String) proveedoresB.getSelectedItem();
            listaProveedorB.addElement(aux);
            proveedoresB.removeItemAt(proveedoresB.getSelectedIndex());
            bd.insertarProductoProveedor(aux);
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregarProveedorBActionPerformed

    private void agregarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarProveedorActionPerformed
        listaProveedor.addElement((String) ProveedoresCB.getSelectedItem());
        ProveedoresCB.removeItem(ProveedoresCB.getSelectedItem());
        if(ProveedoresCB.getItemCount()==0){
            agregarProveedor.setEnabled(false);
            agregarProveedor.setBackground(gris);
        }
    }//GEN-LAST:event_agregarProveedorActionPerformed

    private void ubicacionesBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ubicacionesBKeyPressed
        if(ubicacionesB.getText().length()>0){
            agregarUbicacionB.setEnabled(true);
            agregarUbicacionB.setBackground(azulF);
        }
        if(evt.getKeyCode()==10){
            try {
                String ubicacion = ubicacionesB.getText();
                listaUbicacionesB.addElement(ubicacion);
                ubicacionesB.setText("");
                bd.insertarUbicacion(ubicacion, bd.getClaveProducto());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_ubicacionesBKeyPressed

    private void borrarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarProdActionPerformed
        int re;
        re = JOptionPane.showConfirmDialog(null, "Esta acción no es reversible y borrara al producto", "Advertencia", JOptionPane.WARNING_MESSAGE);
        if(re == 0){
            try {
                bd.eliminarProducto(bd.getClaveProducto());
                panelMostrarProducto.setVisible(false);
                panelConsultarProductos.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_borrarProdActionPerformed

    private void ProductosAdmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductosAdmActionPerformed
        rogeriLogo.setVisible(false);
        panelAgregarProducto.setVisible(false);
        panelUsuario.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelRegistro.setVisible(false);
        panelProveedor.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelConfiguracion.setVisible(false);
        panelConsultarProductos.setVisible(true);
        estadoBusqueda=1;
        try {
            String[][] datos = bd.listarProductosInicial();
            estableceTablaProductos(datos);
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ProductosAdmActionPerformed

    
    private void tablaConsultaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaConsultaProductosMouseClicked
        try {
            DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
            String f1 = DF.format(fechaBIn);
            f1 = f1+" 00:00:00";
            String f2 = DF.format(fechaBFin);
            f2 = f2+" 23:59:59";
            String buscar = (String) tablaConsultaProductos.getModel().getValueAt(tablaConsultaProductos.getSelectedRow(), 0);
            setInfo(buscar);
            for(int i=0;i<listaProveedorB.size();i++){
                proveedoresB.removeItem(listaProveedorB.get(i));
            }
            panelConsultarProductos.setVisible(false);
            panelMostrarProducto.setVisible(true);
            estadoBusqueda=2;
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tablaConsultaProductosMouseClicked

    private void fechaFinalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaFinalPropertyChange
        fechaInicio.getJCalendar().setMaxSelectableDate(fechaFinal.getDate());
        if(fechaFinal.getDate()!=null){
            if(fechaFinal.getDate().compareTo(fechaRegFin)!=0){
                Date fecha1 = fechaInicio.getDate();
                Date fecha2 = fechaFinal.getDate();
                String opc = "";
                if(ordenacion.getSelectedIndex()!=0){
                    switch(ordenacion.getSelectedIndex()){
                        case 1:
                            opc = "idProductos";
                            break;
                        case 2:
                            opc = "nombre";
                            break;
                        case 3:
                            opc = "fecha";
                            break;
                        case 4:
                            opc = "cantidad";
                            break;
                        case 5:
                            opc = "total";
                            break;
                        case 6:
                            opc = "detalles";
                            break;
                    }
                    try {
                        //actualizar tabla
                        DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
                        String f1 = DF.format(fecha1);
                        f1 = f1+" 00:00:00";
                        String f2 = DF.format(fecha2);
                        f2 = f2+" 23:59:59";
                        String[][] res = bd.listarRegistroIn(opc, f1, f2);
                        estableceTablaRegistro(res);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                fechaRegIn=fechaInicio.getDate();
                }
            }
        }
    }//GEN-LAST:event_fechaFinalPropertyChange

    private void maquinariaBCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maquinariaBCBActionPerformed
        if(maquinariaBCB.isEnabled()){
            herramientas.compararMaquinaria((String)maquinariaBCB.getSelectedItem(), bd.getMaquinariaProducto());
        }
    }//GEN-LAST:event_maquinariaBCBActionPerformed
    
    private void nombreMaquinariaTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreMaquinariaTFKeyReleased
        if(nombreMaquinariaTF.getText().length()!=0){
            try {
                Object[][] maquinas = bd.obtenerMaquinariaLikeMatriz(nombreMaquinariaTF.getText().toUpperCase());
                t.ver_tabla2(tablaMaquinarias, maquinas);
            } catch (SQLException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(bd.verificaMaquinaria(nombreMaquinariaTF.getText().toUpperCase())){
                    botonAgregarMaquinaria.setEnabled(false);
                    botonAgregarMaquinaria.setBackground(gris);
                }else{
                    botonAgregarMaquinaria.setEnabled(true);
                    botonAgregarMaquinaria.setBackground(azulF);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            botonAgregarMaquinaria.setEnabled(false);
            botonAgregarMaquinaria.setBackground(gris);
        }
    }//GEN-LAST:event_nombreMaquinariaTFKeyReleased

    private void maquinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maquinariaActionPerformed
        rogeriLogo.setVisible(false);
        panelAgregarProducto.setVisible(false);
        panelUsuario.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelConsultarProductos.setVisible(false);
        panelRegistro.setVisible(false);
        panelProveedor.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelConfiguracion.setVisible(false);
        panelMaquinaria.setVisible(true);
        try {
            Object[][] maquinas = bd.obtenerMaquinariaMatriz();
            t.ver_tabla2(tablaMaquinarias, maquinas);
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_maquinariaActionPerformed

    private void botonAgregarMaquinariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarMaquinariaActionPerformed
        try {
            nombreMaquinariaTF.setText("");
            bd.insertaMaquinaria(nombreMaquinariaTF.getText());
        } catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonAgregarMaquinariaActionPerformed

    private void cargarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarCSVActionPerformed
        String erroresLineas = "Se han encontrado problemas\n";
        boolean creacionProducto = false;
        String col = "";
        int c=0;
        jScrollPane13.setVisible(false);
        exitoCarga.setVisible(false);
        try {
            ArrayList<String[]> valores = herramientas.cargaCSV();
            if(valores!=null){
                valores = herramientas.verificaCSV(valores, bd);
                for(int i=1;i<valores.size();i++){
                    c=i;
                    boolean b1 = herramientas.verificaEntero(valores.get(i)[6]);
                    boolean b2 = herramientas.verificaFlotante(valores.get(i)[7]);
                    boolean b3 = herramientas.verificaEntero(valores.get(i)[8]);
                    boolean b4 = bd.verificaZona(valores.get(i)[9]);
                    boolean b5 = herramientas.verificaUMedida(valores.get(i)[5]);
                    boolean b6;
                    if(valores.get(i)[2].compareToIgnoreCase("")!=0){
                        b6 = bd.verificaMaquinaria(valores.get(i)[2]);
                    }else{
                        b6 = true;
                    }
                    if(b1 && b2 && b3 && b4 && b5 && b6){
                        String claveProducto = valores.get(i)[0];
                        String nombre = valores.get(i)[1];
                        int maquinaria = 0;
                        if(valores.get(i)[2].compareToIgnoreCase("")!=0){
                            maquinaria = bd.consultaIdMaquinaria(valores.get(i)[2]);
                        }
                        String uso = valores.get(i)[3];
                        String descripcion = valores.get(i)[4];
                        String uMedida = valores.get(i)[5];
                        int cantidadDisponible = Integer.parseInt(valores.get(i)[6]);
                        float precio = Float.parseFloat(valores.get(i)[7]);
                        int minimo = Integer.parseInt(valores.get(i)[8]);
                        if(!bd.existeProducto(claveProducto)){
                            BufferedImage BuffQR = herramientas.crearQR(claveProducto, 400, 400);
                            InputStream qr = herramientas.BufferedImage2InputStream(BuffQR);
                            bd.autocommit();
                            int idInventario = bd.insertarInventario(cantidadDisponible, precio, minimo);
                            int idZona = bd.buscarZona(valores.get(i)[9]);
                            bd.agregarProducto(claveProducto, nombre, maquinaria, uso, descripcion, uMedida, qr, null, idInventario, idZona, false);
                            bd.commit();
                            bd.autocommit();
                        }else{
                            col = "1\nError: Producto existente";
                            erroresLineas+="Fila: "+(i+1)+"\nColumnas: "+col+"\n";
                            erroresCSVPanel.setText(erroresLineas);
                        }
                    }else{
                        if(!b6){
                            col ="3, ";
                        }
                        if(!b5){
                           col = "6, "; 
                        }
                        if(!b1){
                            col = "7, "; 
                        }
                        if(!b2){
                            col = "8, "; 
                        }
                        if(!b3){
                            col = "9, "; 
                        }
                        if(!b4){
                            col = "10"; 
                        }
                        if(col.endsWith(", ")){
                            col = col.substring(0, col.length()-2);
                        }
                        erroresLineas+="Fila: "+(i+1)+"\nColumnas: "+col+"\n";
                        erroresCSVPanel.setText(erroresLineas);
                    }
                }
                if(erroresCSVPanel.getText().length()>0){
                    jScrollPane13.setVisible(true);
                }else{
                    exitoCarga.setVisible(true);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            //Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriterException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cargarCSVActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if(jTabbedPane1.getSelectedIndex()==1){
           jScrollPane13.setVisible(false); 
           exitoCarga.setVisible(false);
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void optionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsActionPerformed
        if(!popup.isShowing()){
            popup.show(Principal, options.getX()-options.getWidth(),options.getY()+options.getHeight());
        }else{
            popup.hide();
        }
    }//GEN-LAST:event_optionsActionPerformed

    private void cambiarContraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarContraButtonActionPerformed
        String p = new String(cambiarContra.getPassword());
        try {
            bd.cambiaContrasena(p, usuario);
            exitoContra.setText("Contraseña cambiada con exito");
            exitoContra.setVisible(true);
            logout();
        } catch (SQLException ex) {
            exitoContra.setText("Ocurrio un error");
            exitoContra.setVisible(true);
        }
    }//GEN-LAST:event_cambiarContraButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        if(EditarBoton.isSelected()){
            EditarBoton.doClick();
        }
        jScrollPane5.getVerticalScrollBar().setValue(0);
        panelConsultarProductos.setVisible(true);
        panelMostrarProducto.setVisible(false);
        estadoBusqueda=1;
    }//GEN-LAST:event_returnButtonActionPerformed

    private void listaProductosAction(){
        String opc = "idProductos";
        String sort = "DESC";
        switch(ordenacion1.getSelectedIndex()){
            case 1:
                opc = "idProductos";
                break;
            case 2:
                opc = "nombre";
                break;
            case 3:
                opc = "maquinaria";
                break;
            case 4:
                opc = "uso";
                break;
            case 5:
                opc = "precio";
                break;
        }
        if(sortListaProductos.isSelected()){
            sort = "ASC";
        }else{
            sort = "DESC";
        }
        try {
            String matchAux = matchBuscar.getText().toUpperCase();
            if(matchAux.compareToIgnoreCase("Buscar producto: Ej. BE-8458445")==0){
                matchAux = "";
            }
            String[][]res = bd.listarProductos(matchAux, opc,sort);
            estableceTablaProductos(res);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void sortListaProductosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortListaProductosItemStateChanged
        if(!logout){
            listaProductosAction();
        }
    }//GEN-LAST:event_sortListaProductosItemStateChanged

    private void sortProveedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortProveedorItemStateChanged
        if(!logout){
            ordenaProveedor();
        }
    }//GEN-LAST:event_sortProveedorItemStateChanged


    
    private void jTabbedPane3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane3StateChanged
        if(jTabbedPane3.getSelectedIndex()==1){
            try {
                Object[][] usuarios = bd.listarUsuarios(usuario);
                t.ver_tabla(tablaUsuarios, usuarios);
            } catch (SQLException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTabbedPane3StateChanged

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaUsuariosMouseClicked
        int columna = tablaUsuarios.getSelectedColumn();
        int fila = tablaUsuarios.getSelectedRow();
        Object id = tablaUsuarios.getValueAt(fila, columna);
        if(id instanceof JButton){
            if(columna == 3){//modificar
                ((JButton)id).doClick();
                JButton boton = (JButton) id;
                String idUsuario = (String) tablaUsuarios.getValueAt(fila, 0);
                userLabel.setText(idUsuario);
                nombreLabel.setText((String) tablaUsuarios.getValueAt(fila, 1));
                apellidosLabel.setText((String) tablaUsuarios.getValueAt(fila, 2));
                jScrollPane14.setVisible(false);
                Usuario.setVisible(true);
            }else if(columna == 4){//eliminar
                ((JButton)id).doClick();
                JButton boton = (JButton) id;
                String idUsuario = (String) tablaUsuarios.getValueAt(fila, 0);
                int re;
                re = JOptionPane.showConfirmDialog(null, "Esta acción no es reversible", "Advertencia", JOptionPane.WARNING_MESSAGE);
                if(re == 0){
                    try {
                        bd.eliminaUsuario(idUsuario);
                        Object[][] usuarios = bd.listarUsuarios(usuario);
                        t.ver_tabla(tablaUsuarios, usuarios);
                    } catch (SQLException ex) {
                        Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_tablaUsuariosMouseClicked

    private void tablaMaquinariasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMaquinariasMouseClicked
        int columna = tablaMaquinarias.getSelectedColumn();
        int fila = tablaMaquinarias.getSelectedRow();
        Object id = tablaMaquinarias.getValueAt(fila, columna);
        if(id instanceof JButton){
            ((JButton)id).doClick();
            JButton boton = (JButton) id;
            String nombreMaq = (String) tablaMaquinarias.getValueAt(fila, 0);
            int re;
            re = JOptionPane.showConfirmDialog(null, "Esta acción no es reversible", "Advertencia", JOptionPane.WARNING_MESSAGE);
            if(re == 0){
                try {
                    bd.eliminaMaquinaria(nombreMaq);
                    Object[][] maquinas = bd.obtenerMaquinariaMatriz();
                    t.ver_tabla2(tablaMaquinarias, maquinas);
                } catch (SQLException ex) {
                    Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_tablaMaquinariasMouseClicked

    private void fechaInicioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaInicioPropertyChange
        if(fechaInicio.getDate()!=null){
            if(fechaInicio.getDate().compareTo(fechaRegIn)!=0){
                Date fecha1 = fechaInicio.getDate();
                Date fecha2 = fechaFinal.getDate();
                String opc = "";
                if(ordenacion.getSelectedIndex()!=0){
                    switch(ordenacion.getSelectedIndex()){
                        case 1:
                            opc = "idProductos";
                            break;
                        case 2:
                            opc = "nombre";
                            break;
                        case 3:
                            opc = "fecha";
                            break;
                        case 4:
                            opc = "cantidad";
                            break;
                        case 5:
                            opc = "total";
                            break;
                        case 6:
                            opc = "detalles";
                            break;
                    }
                    try {
                        //actualizar tabla
                        DateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
                        String f1 = DF.format(fecha1);
                        f1 = f1+" 00:00:00";
                        String f2 = DF.format(fecha2);
                        f2 = f2+" 23:59:59";
                        String[][] res = bd.listarRegistroIn(opc, f1, f2);
                        estableceTablaRegistro(res);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                fechaRegIn=fechaInicio.getDate();
                }
            }
        }
    }//GEN-LAST:event_fechaInicioPropertyChange

    private void fechaInicioBPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaInicioBPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            if(evt.getNewValue().toString().compareTo(fechaBIn.toString())!=0){
                fechaBIn=fechaInicioB.getDate();
                tablaRegistroProducto();
            }
        }
    }//GEN-LAST:event_fechaInicioBPropertyChange

    private void fechaFinalBPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fechaFinalBPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            if(evt.getNewValue().toString().compareTo(fechaBFin.toString())!=0){
                fechaBFin = fechaFinalB.getDate();
                tablaRegistroProducto();
            }
        }
    }//GEN-LAST:event_fechaFinalBPropertyChange

    private void cambiarContraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cambiarContraKeyReleased
        String p1 = new String(cambiarContra.getPassword());
        String p2 = new String(cambiarContraConf.getPassword());
        herramientas.contrasenasGUI(p1, p2, cambiarContraButton, errorContra2, errorContra3);
    }//GEN-LAST:event_cambiarContraKeyReleased

    private void cambiarContraConfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cambiarContraConfKeyReleased
        String p1 = new String(cambiarContra.getPassword());
        String p2 = new String(cambiarContraConf.getPassword());
        herramientas.contrasenasGUI(p1, p2, cambiarContraButton, errorContra2, errorContra3);
    }//GEN-LAST:event_cambiarContraConfKeyReleased

    private void regresarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarUsuarioActionPerformed
        jScrollPane14.setVisible(true);
        Usuario.setVisible(false);
    }//GEN-LAST:event_regresarUsuarioActionPerformed


    
    private void contrasenaAdmUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contrasenaAdmUserKeyReleased
        String p1 = new String(contrasenaAdmUser.getPassword());
        String p2 = new String(contrasenaConfAdmUser.getPassword());
        herramientas.contrasenasGUI(p1,p2,cambiarContAdmin,errorContraAdm1,errorContraAdm2);
    }//GEN-LAST:event_contrasenaAdmUserKeyReleased

    
    
    private void contrasenaConfAdmUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contrasenaConfAdmUserKeyReleased
        String p1 = new String(contrasenaAdmUser.getPassword());
        String p2 = new String(contrasenaConfAdmUser.getPassword());
        herramientas.contrasenasGUI(p1,p2,cambiarContAdmin,errorContraAdm1,errorContraAdm2);
    }//GEN-LAST:event_contrasenaConfAdmUserKeyReleased

    private void cambiarContAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarContAdminActionPerformed
        String p = new String(contrasenaAdmUser.getPassword());
        try {
            bd.cambiaContrasena(p, usuario);
            ventanaFeed vf = new ventanaFeed(null, true, "Contraseña cambiada con exito");
            vf.setVisible(true);
            contrasenaAdmUser.setText("");
            contrasenaConfAdmUser.setText("");
            cambiarContAdmin.setBackground(gris);
            cambiarContAdmin.setEnabled(false);
            Usuario.setVisible(false);
            jScrollPane14.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog (null, "Error de conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cambiarContAdminActionPerformed

    private void PasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordKeyTyped
        if(pSHButton.isSelected()){
            pSHButton.doClick();
        }
    }//GEN-LAST:event_PasswordKeyTyped

    private void cantidadDisponibleTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadDisponibleTFKeyReleased
        String text = cantidadDisponibleTF.getText();
        if(text.length()>0){
            int aux = Integer.parseInt(text);
            cantidadDisponibleTF.setText(aux+"");
            cantidadDisponibleTF.setCaretPosition(cantidadDisponibleTF.getText().length());
        }
    }//GEN-LAST:event_cantidadDisponibleTFKeyReleased

    private void minimoTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minimoTFKeyReleased
        String text = minimoTF.getText();
        if(text.length()>0){
            int aux = Integer.parseInt(text);
            minimoTF.setText(aux+"");
            minimoTF.setCaretPosition(minimoTF.getText().length());
        }
    }//GEN-LAST:event_minimoTFKeyReleased

    private void setNormalInventario(){
        ordenacion1.setSelectedIndex(0);
        if(sortListaProductos.isSelected()){
            sortListaProductos.doClick();
        }
        matchBuscar.setText("");
        if(EditarBoton.isSelected()){
            EditarBoton.doClick();
        }
        jScrollPane5.getVerticalScrollBar().setValue(0);
        panelConsultarProductos.setVisible(false);
        panelMostrarProducto.setVisible(false);
        estadoBusqueda=1;
    }
    
    private void setNormalProductos(){
        limpiarCampos();
        jScrollPane13.setVisible(false);
        exitoCarga.setVisible(false);
        jTabbedPane1.setSelectedIndex(0);
        panelAgregarProducto.setVisible(false);
    }
    
    private void setNormalProveedores(){
        direccionTF.setText("");
        razonTF.setText("");
        repPTF.setText("");
        emailPTF.setText("");
        telefonoPTF.setText("");
        jTabbedPane2.setSelectedIndex(0);
        if(sortProveedor.isSelected()){
            sortProveedor.doClick();
        }
        ordenarProveedor.setSelectedIndex(0);
        matchBuscar1.setText("");
        panelProveedor.setVisible(false);
    }
    
    private void setNormalUsuarios(){
        userTF.setText("");
        passwordPF.setText("");
        passwordPFConf.setText("");
        nombreUserTF.setText("");
        apellidoTF.setText("");
        tipoUser.setSelectedIndex(0);
        jTabbedPane3.setSelectedIndex(0);
        panelUsuario.setVisible(false);
    }
    
    private void setNormalMaquinas(){
        nombreMaquinariaTF.setText("");
        panelMaquinaria.setVisible(false);
    }
    
    private void setNormalRegistro(){
        panelRegistro.setVisible(false);
    }
    
    private void setNormalConfiguracion(){
        cambiarContra.setText("");
        cambiarContraConf.setText("");
        panelConfiguracion.setVisible(false);
    }
    
    private void logout(){
        limpiarCampos();
        rogeriLogo.setVisible(true);
        setNormalInventario();
        setNormalProductos();
        setNormalProveedores();
        setNormalMaquinas();
        setNormalUsuarios();
        setNormalRegistro();
        setNormalConfiguracion();
        buttonGroup1.clearSelection();
        Principal.setVisible(false);
        Login.setVisible(true);
        Password.setText("");
        Account.setText("");
        try {
            bd.cierraConexion();
            logout = false;
        }catch (SQLException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void salirActionPerformed(java.awt.event.ActionEvent evt){
        logout=true;
        logout();
    }
    
    private void configuracionActionPerformed(java.awt.event.ActionEvent evt){
        buttonGroup1.clearSelection();
        exitoContra.setVisible(false);
        rogeriLogo.setVisible(false);
        panelAgregarProducto.setVisible(false);
        panelUsuario.setVisible(false);
        panelMostrarProducto.setVisible(false);
        panelConsultarProductos.setVisible(false);
        panelRegistro.setVisible(false);
        panelMaquinaria.setVisible(false);
        panelProveedor.setVisible(false);
        panelConfiguracion.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    
    private JPopupMenu popup;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Account;
    private javax.swing.JPanel Backgroud;
    private javax.swing.JToggleButton EditarBoton;
    private javax.swing.JLabel Error1;
    private javax.swing.JLabel ErrorID;
    private javax.swing.JPanel GestaltAdm;
    private javax.swing.JPanel GestaltOp;
    private javax.swing.JPanel Login;
    private javax.swing.JLabel Mensaje;
    private javax.swing.JComboBox<String> MostrarResultados;
    private javax.swing.JPasswordField Password;
    private javax.swing.JPanel Principal;
    private javax.swing.JToggleButton ProductosAdm;
    private javax.swing.JComboBox<String> ProveedoresCB;
    private javax.swing.JTextField UbicacionTF;
    private javax.swing.JPanel Usuario;
    private javax.swing.JComboBox<String> Zona;
    private javax.swing.JButton aceptarCrearUsuario;
    private javax.swing.JButton aceptarInsertProveedor;
    private javax.swing.JLabel addImage;
    private javax.swing.JButton agregar;
    private javax.swing.JPanel agregarProducto;
    private javax.swing.JToggleButton agregarProductos;
    private javax.swing.JToggleButton agregarProductosOp;
    private javax.swing.JButton agregarProveedor;
    private javax.swing.JButton agregarProveedorB;
    private javax.swing.JButton agregarUbicacion;
    private javax.swing.JButton agregarUbicacionB;
    private javax.swing.JToggleButton agregarUsers;
    private javax.swing.JTextField apellidoTF;
    private javax.swing.JLabel apellidosLabel;
    private javax.swing.JLabel bModImagen;
    private javax.swing.JButton borrarProd;
    private javax.swing.JButton botonAgregarMaquinaria;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cambiarContAdmin;
    private javax.swing.JPasswordField cambiarContra;
    private javax.swing.JButton cambiarContraButton;
    private javax.swing.JPasswordField cambiarContraConf;
    private javax.swing.JTextField cantidadDisponibleTF;
    private javax.swing.JButton cargarCSV;
    private javax.swing.JPanel cargarProducto;
    private javax.swing.JTextField claveB;
    private javax.swing.JTextField claveDeProductoTF;
    private javax.swing.JPasswordField contrasenaAdmUser;
    private javax.swing.JPasswordField contrasenaConfAdmUser;
    private javax.swing.JTextArea descripcionB;
    private javax.swing.JTextArea descripcionTF;
    private javax.swing.JTextField direccionTF;
    private javax.swing.JLabel disponiblesB;
    private javax.swing.JTextField emailPTF;
    private javax.swing.JButton entradasButton;
    private javax.swing.JLabel errorContra2;
    private javax.swing.JLabel errorContra3;
    private javax.swing.JLabel errorContraAdm1;
    private javax.swing.JLabel errorContraAdm2;
    private javax.swing.JLabel errorCorreo;
    private javax.swing.JLabel errorCrearPassword;
    private javax.swing.JLabel errorCrearPassword1;
    private javax.swing.JLabel errorCrearUsername;
    private javax.swing.JEditorPane erroresCSVPanel;
    private javax.swing.JLabel exitoCarga;
    private javax.swing.JLabel exitoContra;
    private com.toedter.calendar.JDateChooser fechaFinal;
    private com.toedter.calendar.JDateChooser fechaFinalB;
    private com.toedter.calendar.JDateChooser fechaInicio;
    private com.toedter.calendar.JDateChooser fechaInicioB;
    private javax.swing.JButton guardarBusqueda;
    private javax.swing.JButton imprimir;
    private javax.swing.JButton iniciarSesion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JList<String> listaProveedores;
    private javax.swing.JList<String> listaProveedoresB;
    private javax.swing.JList<String> listaUbicacion;
    private javax.swing.JList<String> listaUbicacionB;
    private javax.swing.JToggleButton maquinaria;
    private javax.swing.JComboBox<String> maquinariaBCB;
    private javax.swing.JComboBox<String> maquinariaCB;
    private javax.swing.JComboBox<String> maquinariaPCB;
    private javax.swing.JButton masCDButton;
    private javax.swing.JTextField matchBuscar;
    private javax.swing.JTextField matchBuscar1;
    private javax.swing.JButton menosCDButton;
    private javax.swing.JButton menosMinimoButton;
    private javax.swing.JLabel mensajeBienvenida;
    private javax.swing.JButton minimoMasButton;
    private javax.swing.JTextField minimoTF;
    private javax.swing.JTextField minimosB;
    private javax.swing.JTextField nombreB;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JTextField nombreMaquinariaTF;
    private javax.swing.JTextField nombreTF;
    private javax.swing.JTextField nombreUserTF;
    private javax.swing.JButton options;
    private javax.swing.JComboBox<String> ordenacion;
    private javax.swing.JComboBox<String> ordenacion1;
    private javax.swing.JComboBox<String> ordenarProveedor;
    private javax.swing.JToggleButton pSHButton;
    private javax.swing.JPanel panelAgregarProducto;
    private javax.swing.JPanel panelConfiguracion;
    private javax.swing.JPanel panelConsultarProductos;
    private javax.swing.JPanel panelMaquinaria;
    private javax.swing.JPanel panelMostrarProducto;
    private javax.swing.JPanel panelProveedor;
    private javax.swing.JPanel panelRegistro;
    private javax.swing.JPanel panelUsuario;
    private javax.swing.JPasswordField passwordPF;
    private javax.swing.JPasswordField passwordPFConf;
    private javax.swing.JTextField precioB;
    private javax.swing.JTextField precioEstimadoTF;
    private javax.swing.JToggleButton productosOp;
    private javax.swing.JToggleButton proveedorButton;
    private javax.swing.JComboBox<String> proveedoresB;
    private javax.swing.JLabel r1;
    private javax.swing.JLabel r2;
    private javax.swing.JTextField razonTF;
    private javax.swing.JToggleButton registroBoton;
    private javax.swing.JToggleButton registroBoton1;
    private javax.swing.JButton regresarUsuario;
    private javax.swing.JTextField repPTF;
    private javax.swing.JPanel resultado;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel rogeriLogo;
    private javax.swing.JButton salidasButton;
    private javax.swing.JToggleButton sortListaProductos;
    private javax.swing.JToggleButton sortProveedor;
    private javax.swing.JTable tablaConsultaProductos;
    private javax.swing.JTable tablaEntradasSalidas;
    private javax.swing.JTable tablaMaquinarias;
    private javax.swing.JTable tablaProveedores;
    private javax.swing.JTable tablaRegistros;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField telefonoPTF;
    private javax.swing.JComboBox<String> tipoUser;
    private javax.swing.JComboBox<String> uMedidaB;
    private javax.swing.JComboBox<String> uMedidaJCB;
    private javax.swing.JTextField ubicacionesB;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTF;
    private javax.swing.JTextField usoB;
    private javax.swing.JTextField usoTF;
    // End of variables declaration//GEN-END:variables
}
